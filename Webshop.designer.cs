#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="ASPNETDB")]
public partial class WebshopDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertOrganization(Organization instance);
  partial void UpdateOrganization(Organization instance);
  partial void DeleteOrganization(Organization instance);
  partial void InsertDiscount(Discount instance);
  partial void UpdateDiscount(Discount instance);
  partial void DeleteDiscount(Discount instance);
  partial void InsertDiscountSubEvent(DiscountSubEvent instance);
  partial void UpdateDiscountSubEvent(DiscountSubEvent instance);
  partial void DeleteDiscountSubEvent(DiscountSubEvent instance);
  partial void InsertEventImage(EventImage instance);
  partial void UpdateEventImage(EventImage instance);
  partial void DeleteEventImage(EventImage instance);
  partial void InsertEventOrganization(EventOrganization instance);
  partial void UpdateEventOrganization(EventOrganization instance);
  partial void DeleteEventOrganization(EventOrganization instance);
  partial void InsertEventOrganizer(EventOrganizer instance);
  partial void UpdateEventOrganizer(EventOrganizer instance);
  partial void DeleteEventOrganizer(EventOrganizer instance);
  partial void InsertEventPlacesToMeet(EventPlacesToMeet instance);
  partial void UpdateEventPlacesToMeet(EventPlacesToMeet instance);
  partial void DeleteEventPlacesToMeet(EventPlacesToMeet instance);
  partial void InsertEvent(Event instance);
  partial void UpdateEvent(Event instance);
  partial void DeleteEvent(Event instance);
  partial void InsertImage(Image instance);
  partial void UpdateImage(Image instance);
  partial void DeleteImage(Image instance);
  partial void InsertListsOfParticipant(ListsOfParticipant instance);
  partial void UpdateListsOfParticipant(ListsOfParticipant instance);
  partial void DeleteListsOfParticipant(ListsOfParticipant instance);
  partial void InsertOrganizationContactPeople(OrganizationContactPeople instance);
  partial void UpdateOrganizationContactPeople(OrganizationContactPeople instance);
  partial void DeleteOrganizationContactPeople(OrganizationContactPeople instance);
  partial void Insertaspnet_Application(aspnet_Application instance);
  partial void Updateaspnet_Application(aspnet_Application instance);
  partial void Deleteaspnet_Application(aspnet_Application instance);
  partial void Insertaspnet_WebEvent_Event(aspnet_WebEvent_Event instance);
  partial void Updateaspnet_WebEvent_Event(aspnet_WebEvent_Event instance);
  partial void Deleteaspnet_WebEvent_Event(aspnet_WebEvent_Event instance);
  partial void Insertaspnet_Membership(aspnet_Membership instance);
  partial void Updateaspnet_Membership(aspnet_Membership instance);
  partial void Deleteaspnet_Membership(aspnet_Membership instance);
  partial void Insertaspnet_Path(aspnet_Path instance);
  partial void Updateaspnet_Path(aspnet_Path instance);
  partial void Deleteaspnet_Path(aspnet_Path instance);
  partial void Insertaspnet_PersonalizationAllUser(aspnet_PersonalizationAllUser instance);
  partial void Updateaspnet_PersonalizationAllUser(aspnet_PersonalizationAllUser instance);
  partial void Deleteaspnet_PersonalizationAllUser(aspnet_PersonalizationAllUser instance);
  partial void Insertaspnet_PersonalizationPerUser(aspnet_PersonalizationPerUser instance);
  partial void Updateaspnet_PersonalizationPerUser(aspnet_PersonalizationPerUser instance);
  partial void Deleteaspnet_PersonalizationPerUser(aspnet_PersonalizationPerUser instance);
  partial void Insertaspnet_Profile(aspnet_Profile instance);
  partial void Updateaspnet_Profile(aspnet_Profile instance);
  partial void Deleteaspnet_Profile(aspnet_Profile instance);
  partial void Insertaspnet_Role(aspnet_Role instance);
  partial void Updateaspnet_Role(aspnet_Role instance);
  partial void Deleteaspnet_Role(aspnet_Role instance);
  partial void Insertaspnet_SchemaVersion(aspnet_SchemaVersion instance);
  partial void Updateaspnet_SchemaVersion(aspnet_SchemaVersion instance);
  partial void Deleteaspnet_SchemaVersion(aspnet_SchemaVersion instance);
  partial void Insertaspnet_User(aspnet_User instance);
  partial void Updateaspnet_User(aspnet_User instance);
  partial void Deleteaspnet_User(aspnet_User instance);
  partial void Insertaspnet_UsersInRole(aspnet_UsersInRole instance);
  partial void Updateaspnet_UsersInRole(aspnet_UsersInRole instance);
  partial void Deleteaspnet_UsersInRole(aspnet_UsersInRole instance);
  #endregion
	
	public WebshopDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ASPNETDBConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public WebshopDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public WebshopDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public WebshopDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public WebshopDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Organization> Organizations
	{
		get
		{
			return this.GetTable<Organization>();
		}
	}
	
	public System.Data.Linq.Table<Discount> Discounts
	{
		get
		{
			return this.GetTable<Discount>();
		}
	}
	
	public System.Data.Linq.Table<DiscountSubEvent> DiscountSubEvents
	{
		get
		{
			return this.GetTable<DiscountSubEvent>();
		}
	}
	
	public System.Data.Linq.Table<EventImage> EventImages
	{
		get
		{
			return this.GetTable<EventImage>();
		}
	}
	
	public System.Data.Linq.Table<EventOrganization> EventOrganizations
	{
		get
		{
			return this.GetTable<EventOrganization>();
		}
	}
	
	public System.Data.Linq.Table<EventOrganizer> EventOrganizers
	{
		get
		{
			return this.GetTable<EventOrganizer>();
		}
	}
	
	public System.Data.Linq.Table<EventPlacesToMeet> EventPlacesToMeets
	{
		get
		{
			return this.GetTable<EventPlacesToMeet>();
		}
	}
	
	public System.Data.Linq.Table<Event> Events
	{
		get
		{
			return this.GetTable<Event>();
		}
	}
	
	public System.Data.Linq.Table<Image> Images
	{
		get
		{
			return this.GetTable<Image>();
		}
	}
	
	public System.Data.Linq.Table<ListsOfParticipant> ListsOfParticipants
	{
		get
		{
			return this.GetTable<ListsOfParticipant>();
		}
	}
	
	public System.Data.Linq.Table<OrganizationContactPeople> OrganizationContactPeoples
	{
		get
		{
			return this.GetTable<OrganizationContactPeople>();
		}
	}
	
	public System.Data.Linq.Table<aspnet_Application> aspnet_Applications
	{
		get
		{
			return this.GetTable<aspnet_Application>();
		}
	}
	
	public System.Data.Linq.Table<aspnet_WebEvent_Event> aspnet_WebEvent_Events
	{
		get
		{
			return this.GetTable<aspnet_WebEvent_Event>();
		}
	}
	
	public System.Data.Linq.Table<aspnet_Membership> aspnet_Memberships
	{
		get
		{
			return this.GetTable<aspnet_Membership>();
		}
	}
	
	public System.Data.Linq.Table<aspnet_Path> aspnet_Paths
	{
		get
		{
			return this.GetTable<aspnet_Path>();
		}
	}
	
	public System.Data.Linq.Table<aspnet_PersonalizationAllUser> aspnet_PersonalizationAllUsers
	{
		get
		{
			return this.GetTable<aspnet_PersonalizationAllUser>();
		}
	}
	
	public System.Data.Linq.Table<aspnet_PersonalizationPerUser> aspnet_PersonalizationPerUsers
	{
		get
		{
			return this.GetTable<aspnet_PersonalizationPerUser>();
		}
	}
	
	public System.Data.Linq.Table<aspnet_Profile> aspnet_Profiles
	{
		get
		{
			return this.GetTable<aspnet_Profile>();
		}
	}
	
	public System.Data.Linq.Table<aspnet_Role> aspnet_Roles
	{
		get
		{
			return this.GetTable<aspnet_Role>();
		}
	}
	
	public System.Data.Linq.Table<aspnet_SchemaVersion> aspnet_SchemaVersions
	{
		get
		{
			return this.GetTable<aspnet_SchemaVersion>();
		}
	}
	
	public System.Data.Linq.Table<aspnet_User> aspnet_Users
	{
		get
		{
			return this.GetTable<aspnet_User>();
		}
	}
	
	public System.Data.Linq.Table<aspnet_UsersInRole> aspnet_UsersInRoles
	{
		get
		{
			return this.GetTable<aspnet_UsersInRole>();
		}
	}
}

[Table(Name="dbo.Organizations")]
public partial class Organization : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ID;
	
	private string _Name;
	
	private string _Description;
	
	private EntitySet<EventOrganization> _EventOrganizations;
	
	private EntitySet<OrganizationContactPeople> _OrganizationContactPeoples;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
	
	public Organization()
	{
		this._EventOrganizations = new EntitySet<EventOrganization>(new Action<EventOrganization>(this.attach_EventOrganizations), new Action<EventOrganization>(this.detach_EventOrganizations));
		this._OrganizationContactPeoples = new EntitySet<OrganizationContactPeople>(new Action<OrganizationContactPeople>(this.attach_OrganizationContactPeoples), new Action<OrganizationContactPeople>(this.detach_OrganizationContactPeoples));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="NVarChar(MAX)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Association(Name="Organization_EventOrganization", Storage="_EventOrganizations", OtherKey="OrgainzationID")]
	public EntitySet<EventOrganization> EventOrganizations
	{
		get
		{
			return this._EventOrganizations;
		}
		set
		{
			this._EventOrganizations.Assign(value);
		}
	}
	
	[Association(Name="Organization_OrganizationContactPeople", Storage="_OrganizationContactPeoples", OtherKey="OrganizationID")]
	public EntitySet<OrganizationContactPeople> OrganizationContactPeoples
	{
		get
		{
			return this._OrganizationContactPeoples;
		}
		set
		{
			this._OrganizationContactPeoples.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_EventOrganizations(EventOrganization entity)
	{
		this.SendPropertyChanging();
		entity.Organization = this;
	}
	
	private void detach_EventOrganizations(EventOrganization entity)
	{
		this.SendPropertyChanging();
		entity.Organization = null;
	}
	
	private void attach_OrganizationContactPeoples(OrganizationContactPeople entity)
	{
		this.SendPropertyChanging();
		entity.Organization = this;
	}
	
	private void detach_OrganizationContactPeoples(OrganizationContactPeople entity)
	{
		this.SendPropertyChanging();
		entity.Organization = null;
	}
}

[Table(Name="dbo.Discount")]
public partial class Discount : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Code;
	
	private bool _IsPercentage;
	
	private decimal _Value;
	
	private string _Name;
	
	private string _Conditions;
	
	private EntitySet<DiscountSubEvent> _DiscountSubEvents;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnIsPercentageChanging(bool value);
    partial void OnIsPercentageChanged();
    partial void OnValueChanging(decimal value);
    partial void OnValueChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnConditionsChanging(string value);
    partial void OnConditionsChanged();
    #endregion
	
	public Discount()
	{
		this._DiscountSubEvents = new EntitySet<DiscountSubEvent>(new Action<DiscountSubEvent>(this.attach_DiscountSubEvents), new Action<DiscountSubEvent>(this.detach_DiscountSubEvents));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Code", DbType="NVarChar(900) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[Column(Storage="_IsPercentage", DbType="Bit NOT NULL")]
	public bool IsPercentage
	{
		get
		{
			return this._IsPercentage;
		}
		set
		{
			if ((this._IsPercentage != value))
			{
				this.OnIsPercentageChanging(value);
				this.SendPropertyChanging();
				this._IsPercentage = value;
				this.SendPropertyChanged("IsPercentage");
				this.OnIsPercentageChanged();
			}
		}
	}
	
	[Column(Storage="_Value", DbType="Decimal(18,2) NOT NULL")]
	public decimal Value
	{
		get
		{
			return this._Value;
		}
		set
		{
			if ((this._Value != value))
			{
				this.OnValueChanging(value);
				this.SendPropertyChanging();
				this._Value = value;
				this.SendPropertyChanged("Value");
				this.OnValueChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Conditions", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Conditions
	{
		get
		{
			return this._Conditions;
		}
		set
		{
			if ((this._Conditions != value))
			{
				this.OnConditionsChanging(value);
				this.SendPropertyChanging();
				this._Conditions = value;
				this.SendPropertyChanged("Conditions");
				this.OnConditionsChanged();
			}
		}
	}
	
	[Association(Name="Discount_DiscountSubEvent", Storage="_DiscountSubEvents", OtherKey="DiscountID")]
	public EntitySet<DiscountSubEvent> DiscountSubEvents
	{
		get
		{
			return this._DiscountSubEvents;
		}
		set
		{
			this._DiscountSubEvents.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_DiscountSubEvents(DiscountSubEvent entity)
	{
		this.SendPropertyChanging();
		entity.Discount = this;
	}
	
	private void detach_DiscountSubEvents(DiscountSubEvent entity)
	{
		this.SendPropertyChanging();
		entity.Discount = null;
	}
}

[Table(Name="dbo.DiscountSubEvent")]
public partial class DiscountSubEvent : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _DiscountID;
	
	private long _EventId;
	
	private EntityRef<Discount> _Discount;
	
	private EntityRef<Event> _Event;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDiscountIDChanging(int value);
    partial void OnDiscountIDChanged();
    partial void OnEventIdChanging(long value);
    partial void OnEventIdChanged();
    #endregion
	
	public DiscountSubEvent()
	{
		this._Discount = default(EntityRef<Discount>);
		this._Event = default(EntityRef<Event>);
		OnCreated();
	}
	
	[Column(Storage="_DiscountID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int DiscountID
	{
		get
		{
			return this._DiscountID;
		}
		set
		{
			if ((this._DiscountID != value))
			{
				if (this._Discount.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDiscountIDChanging(value);
				this.SendPropertyChanging();
				this._DiscountID = value;
				this.SendPropertyChanged("DiscountID");
				this.OnDiscountIDChanged();
			}
		}
	}
	
	[Column(Storage="_EventId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
	public long EventId
	{
		get
		{
			return this._EventId;
		}
		set
		{
			if ((this._EventId != value))
			{
				if (this._Event.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEventIdChanging(value);
				this.SendPropertyChanging();
				this._EventId = value;
				this.SendPropertyChanged("EventId");
				this.OnEventIdChanged();
			}
		}
	}
	
	[Association(Name="Discount_DiscountSubEvent", Storage="_Discount", ThisKey="DiscountID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Discount Discount
	{
		get
		{
			return this._Discount.Entity;
		}
		set
		{
			Discount previousValue = this._Discount.Entity;
			if (((previousValue != value) 
						|| (this._Discount.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Discount.Entity = null;
					previousValue.DiscountSubEvents.Remove(this);
				}
				this._Discount.Entity = value;
				if ((value != null))
				{
					value.DiscountSubEvents.Add(this);
					this._DiscountID = value.ID;
				}
				else
				{
					this._DiscountID = default(int);
				}
				this.SendPropertyChanged("Discount");
			}
		}
	}
	
	[Association(Name="Event_DiscountSubEvent", Storage="_Event", ThisKey="EventId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Event Event
	{
		get
		{
			return this._Event.Entity;
		}
		set
		{
			Event previousValue = this._Event.Entity;
			if (((previousValue != value) 
						|| (this._Event.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Event.Entity = null;
					previousValue.DiscountSubEvents.Remove(this);
				}
				this._Event.Entity = value;
				if ((value != null))
				{
					value.DiscountSubEvents.Add(this);
					this._EventId = value.ID;
				}
				else
				{
					this._EventId = default(long);
				}
				this.SendPropertyChanged("Event");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.EventImages")]
public partial class EventImage : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ImageID;
	
	private long _EventID;
	
	private EntityRef<Event> _Event;
	
	private EntityRef<Image> _Image;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnImageIDChanging(long value);
    partial void OnImageIDChanged();
    partial void OnEventIDChanging(long value);
    partial void OnEventIDChanged();
    #endregion
	
	public EventImage()
	{
		this._Event = default(EntityRef<Event>);
		this._Image = default(EntityRef<Image>);
		OnCreated();
	}
	
	[Column(Storage="_ImageID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
	public long ImageID
	{
		get
		{
			return this._ImageID;
		}
		set
		{
			if ((this._ImageID != value))
			{
				if (this._Image.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnImageIDChanging(value);
				this.SendPropertyChanging();
				this._ImageID = value;
				this.SendPropertyChanged("ImageID");
				this.OnImageIDChanged();
			}
		}
	}
	
	[Column(Storage="_EventID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
	public long EventID
	{
		get
		{
			return this._EventID;
		}
		set
		{
			if ((this._EventID != value))
			{
				if (this._Event.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEventIDChanging(value);
				this.SendPropertyChanging();
				this._EventID = value;
				this.SendPropertyChanged("EventID");
				this.OnEventIDChanged();
			}
		}
	}
	
	[Association(Name="Event_EventImage", Storage="_Event", ThisKey="EventID", IsForeignKey=true)]
	public Event Event
	{
		get
		{
			return this._Event.Entity;
		}
		set
		{
			Event previousValue = this._Event.Entity;
			if (((previousValue != value) 
						|| (this._Event.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Event.Entity = null;
					previousValue.EventImages.Remove(this);
				}
				this._Event.Entity = value;
				if ((value != null))
				{
					value.EventImages.Add(this);
					this._EventID = value.ID;
				}
				else
				{
					this._EventID = default(long);
				}
				this.SendPropertyChanged("Event");
			}
		}
	}
	
	[Association(Name="Image_EventImage", Storage="_Image", ThisKey="ImageID", IsForeignKey=true)]
	public Image Image
	{
		get
		{
			return this._Image.Entity;
		}
		set
		{
			Image previousValue = this._Image.Entity;
			if (((previousValue != value) 
						|| (this._Image.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Image.Entity = null;
					previousValue.EventImages.Remove(this);
				}
				this._Image.Entity = value;
				if ((value != null))
				{
					value.EventImages.Add(this);
					this._ImageID = value.ID;
				}
				else
				{
					this._ImageID = default(long);
				}
				this.SendPropertyChanged("Image");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.EventOrganizations")]
public partial class EventOrganization : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _EventID;
	
	private long _OrgainzationID;
	
	private EntityRef<Organization> _Organization;
	
	private EntityRef<Event> _Event;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIDChanging(long value);
    partial void OnEventIDChanged();
    partial void OnOrgainzationIDChanging(long value);
    partial void OnOrgainzationIDChanged();
    #endregion
	
	public EventOrganization()
	{
		this._Organization = default(EntityRef<Organization>);
		this._Event = default(EntityRef<Event>);
		OnCreated();
	}
	
	[Column(Storage="_EventID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
	public long EventID
	{
		get
		{
			return this._EventID;
		}
		set
		{
			if ((this._EventID != value))
			{
				if (this._Event.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEventIDChanging(value);
				this.SendPropertyChanging();
				this._EventID = value;
				this.SendPropertyChanged("EventID");
				this.OnEventIDChanged();
			}
		}
	}
	
	[Column(Storage="_OrgainzationID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
	public long OrgainzationID
	{
		get
		{
			return this._OrgainzationID;
		}
		set
		{
			if ((this._OrgainzationID != value))
			{
				if (this._Organization.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnOrgainzationIDChanging(value);
				this.SendPropertyChanging();
				this._OrgainzationID = value;
				this.SendPropertyChanged("OrgainzationID");
				this.OnOrgainzationIDChanged();
			}
		}
	}
	
	[Association(Name="Organization_EventOrganization", Storage="_Organization", ThisKey="OrgainzationID", IsForeignKey=true)]
	public Organization Organization
	{
		get
		{
			return this._Organization.Entity;
		}
		set
		{
			Organization previousValue = this._Organization.Entity;
			if (((previousValue != value) 
						|| (this._Organization.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Organization.Entity = null;
					previousValue.EventOrganizations.Remove(this);
				}
				this._Organization.Entity = value;
				if ((value != null))
				{
					value.EventOrganizations.Add(this);
					this._OrgainzationID = value.ID;
				}
				else
				{
					this._OrgainzationID = default(long);
				}
				this.SendPropertyChanged("Organization");
			}
		}
	}
	
	[Association(Name="Event_EventOrganization", Storage="_Event", ThisKey="EventID", IsForeignKey=true)]
	public Event Event
	{
		get
		{
			return this._Event.Entity;
		}
		set
		{
			Event previousValue = this._Event.Entity;
			if (((previousValue != value) 
						|| (this._Event.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Event.Entity = null;
					previousValue.EventOrganizations.Remove(this);
				}
				this._Event.Entity = value;
				if ((value != null))
				{
					value.EventOrganizations.Add(this);
					this._EventID = value.ID;
				}
				else
				{
					this._EventID = default(long);
				}
				this.SendPropertyChanged("Event");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.EventOrganizers")]
public partial class EventOrganizer : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _EventID;
	
	private System.Guid _UserID;
	
	private EntityRef<Event> _Event;
	
	private EntityRef<aspnet_User> _aspnet_User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIDChanging(long value);
    partial void OnEventIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    #endregion
	
	public EventOrganizer()
	{
		this._Event = default(EntityRef<Event>);
		this._aspnet_User = default(EntityRef<aspnet_User>);
		OnCreated();
	}
	
	[Column(Storage="_EventID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
	public long EventID
	{
		get
		{
			return this._EventID;
		}
		set
		{
			if ((this._EventID != value))
			{
				if (this._Event.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEventIDChanging(value);
				this.SendPropertyChanging();
				this._EventID = value;
				this.SendPropertyChanged("EventID");
				this.OnEventIDChanged();
			}
		}
	}
	
	[Column(Storage="_UserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				if (this._aspnet_User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[Association(Name="Event_EventOrganizer", Storage="_Event", ThisKey="EventID", IsForeignKey=true)]
	public Event Event
	{
		get
		{
			return this._Event.Entity;
		}
		set
		{
			Event previousValue = this._Event.Entity;
			if (((previousValue != value) 
						|| (this._Event.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Event.Entity = null;
					previousValue.EventOrganizers.Remove(this);
				}
				this._Event.Entity = value;
				if ((value != null))
				{
					value.EventOrganizers.Add(this);
					this._EventID = value.ID;
				}
				else
				{
					this._EventID = default(long);
				}
				this.SendPropertyChanged("Event");
			}
		}
	}
	
	[Association(Name="aspnet_User_EventOrganizer", Storage="_aspnet_User", ThisKey="UserID", IsForeignKey=true)]
	public aspnet_User aspnet_User
	{
		get
		{
			return this._aspnet_User.Entity;
		}
		set
		{
			aspnet_User previousValue = this._aspnet_User.Entity;
			if (((previousValue != value) 
						|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._aspnet_User.Entity = null;
					previousValue.EventOrganizers.Remove(this);
				}
				this._aspnet_User.Entity = value;
				if ((value != null))
				{
					value.EventOrganizers.Add(this);
					this._UserID = value.UserId;
				}
				else
				{
					this._UserID = default(System.Guid);
				}
				this.SendPropertyChanged("aspnet_User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.EventPlacesToMeet")]
public partial class EventPlacesToMeet : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ID;
	
	private long _EventID;
	
	private string _Name;
	
	private string _Address;
	
	private string _Description;
	
	private EntityRef<Event> _Event;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnEventIDChanging(long value);
    partial void OnEventIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
	
	public EventPlacesToMeet()
	{
		this._Event = default(EntityRef<Event>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_EventID", DbType="BigInt NOT NULL")]
	public long EventID
	{
		get
		{
			return this._EventID;
		}
		set
		{
			if ((this._EventID != value))
			{
				if (this._Event.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEventIDChanging(value);
				this.SendPropertyChanging();
				this._EventID = value;
				this.SendPropertyChanged("EventID");
				this.OnEventIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Address", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Association(Name="Event_EventPlacesToMeet", Storage="_Event", ThisKey="EventID", IsForeignKey=true)]
	public Event Event
	{
		get
		{
			return this._Event.Entity;
		}
		set
		{
			Event previousValue = this._Event.Entity;
			if (((previousValue != value) 
						|| (this._Event.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Event.Entity = null;
					previousValue.EventPlacesToMeets.Remove(this);
				}
				this._Event.Entity = value;
				if ((value != null))
				{
					value.EventPlacesToMeets.Add(this);
					this._EventID = value.ID;
				}
				else
				{
					this._EventID = default(long);
				}
				this.SendPropertyChanged("Event");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Events")]
public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ID;
	
	private System.Nullable<long> _ParentEventID;
	
	private System.DateTime _StsrtDateTime;
	
	private System.DateTime _EndDateTime;
	
	private int _NOfInterested;
	
	private int _NOfPaid;
	
	private int _NOfMaximum;
	
	private int _NOfMinimum;
	
	private int _NOfCancelled;
	
	private string _Conditions;
	
	private byte _Status;
	
	private string _Location;
	
	private byte _Type;
	
	private decimal _Price;
	
	private string _Description;
	
	private bool _isMainEvent;
	
	private EntitySet<DiscountSubEvent> _DiscountSubEvents;
	
	private EntitySet<EventImage> _EventImages;
	
	private EntitySet<EventOrganization> _EventOrganizations;
	
	private EntitySet<EventOrganizer> _EventOrganizers;
	
	private EntitySet<EventPlacesToMeet> _EventPlacesToMeets;
	
	private EntitySet<Event> _Events;
	
	private EntitySet<ListsOfParticipant> _ListsOfParticipants;
	
	private EntityRef<Event> _Event1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnParentEventIDChanging(System.Nullable<long> value);
    partial void OnParentEventIDChanged();
    partial void OnStsrtDateTimeChanging(System.DateTime value);
    partial void OnStsrtDateTimeChanged();
    partial void OnEndDateTimeChanging(System.DateTime value);
    partial void OnEndDateTimeChanged();
    partial void OnNOfInterestedChanging(int value);
    partial void OnNOfInterestedChanged();
    partial void OnNOfPaidChanging(int value);
    partial void OnNOfPaidChanged();
    partial void OnNOfMaximumChanging(int value);
    partial void OnNOfMaximumChanged();
    partial void OnNOfMinimumChanging(int value);
    partial void OnNOfMinimumChanged();
    partial void OnNOfCancelledChanging(int value);
    partial void OnNOfCancelledChanged();
    partial void OnConditionsChanging(string value);
    partial void OnConditionsChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnTypeChanging(byte value);
    partial void OnTypeChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnisMainEventChanging(bool value);
    partial void OnisMainEventChanged();
    #endregion
	
	public Event()
	{
		this._DiscountSubEvents = new EntitySet<DiscountSubEvent>(new Action<DiscountSubEvent>(this.attach_DiscountSubEvents), new Action<DiscountSubEvent>(this.detach_DiscountSubEvents));
		this._EventImages = new EntitySet<EventImage>(new Action<EventImage>(this.attach_EventImages), new Action<EventImage>(this.detach_EventImages));
		this._EventOrganizations = new EntitySet<EventOrganization>(new Action<EventOrganization>(this.attach_EventOrganizations), new Action<EventOrganization>(this.detach_EventOrganizations));
		this._EventOrganizers = new EntitySet<EventOrganizer>(new Action<EventOrganizer>(this.attach_EventOrganizers), new Action<EventOrganizer>(this.detach_EventOrganizers));
		this._EventPlacesToMeets = new EntitySet<EventPlacesToMeet>(new Action<EventPlacesToMeet>(this.attach_EventPlacesToMeets), new Action<EventPlacesToMeet>(this.detach_EventPlacesToMeets));
		this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
		this._ListsOfParticipants = new EntitySet<ListsOfParticipant>(new Action<ListsOfParticipant>(this.attach_ListsOfParticipants), new Action<ListsOfParticipant>(this.detach_ListsOfParticipants));
		this._Event1 = default(EntityRef<Event>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_ParentEventID", DbType="BigInt")]
	public System.Nullable<long> ParentEventID
	{
		get
		{
			return this._ParentEventID;
		}
		set
		{
			if ((this._ParentEventID != value))
			{
				if (this._Event1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnParentEventIDChanging(value);
				this.SendPropertyChanging();
				this._ParentEventID = value;
				this.SendPropertyChanged("ParentEventID");
				this.OnParentEventIDChanged();
			}
		}
	}
	
	[Column(Storage="_StsrtDateTime", DbType="DateTime NOT NULL")]
	public System.DateTime StsrtDateTime
	{
		get
		{
			return this._StsrtDateTime;
		}
		set
		{
			if ((this._StsrtDateTime != value))
			{
				this.OnStsrtDateTimeChanging(value);
				this.SendPropertyChanging();
				this._StsrtDateTime = value;
				this.SendPropertyChanged("StsrtDateTime");
				this.OnStsrtDateTimeChanged();
			}
		}
	}
	
	[Column(Storage="_EndDateTime", DbType="DateTime NOT NULL")]
	public System.DateTime EndDateTime
	{
		get
		{
			return this._EndDateTime;
		}
		set
		{
			if ((this._EndDateTime != value))
			{
				this.OnEndDateTimeChanging(value);
				this.SendPropertyChanging();
				this._EndDateTime = value;
				this.SendPropertyChanged("EndDateTime");
				this.OnEndDateTimeChanged();
			}
		}
	}
	
	[Column(Storage="_NOfInterested", DbType="Int NOT NULL")]
	public int NOfInterested
	{
		get
		{
			return this._NOfInterested;
		}
		set
		{
			if ((this._NOfInterested != value))
			{
				this.OnNOfInterestedChanging(value);
				this.SendPropertyChanging();
				this._NOfInterested = value;
				this.SendPropertyChanged("NOfInterested");
				this.OnNOfInterestedChanged();
			}
		}
	}
	
	[Column(Storage="_NOfPaid", DbType="Int NOT NULL")]
	public int NOfPaid
	{
		get
		{
			return this._NOfPaid;
		}
		set
		{
			if ((this._NOfPaid != value))
			{
				this.OnNOfPaidChanging(value);
				this.SendPropertyChanging();
				this._NOfPaid = value;
				this.SendPropertyChanged("NOfPaid");
				this.OnNOfPaidChanged();
			}
		}
	}
	
	[Column(Storage="_NOfMaximum", DbType="Int NOT NULL")]
	public int NOfMaximum
	{
		get
		{
			return this._NOfMaximum;
		}
		set
		{
			if ((this._NOfMaximum != value))
			{
				this.OnNOfMaximumChanging(value);
				this.SendPropertyChanging();
				this._NOfMaximum = value;
				this.SendPropertyChanged("NOfMaximum");
				this.OnNOfMaximumChanged();
			}
		}
	}
	
	[Column(Storage="_NOfMinimum", DbType="Int NOT NULL")]
	public int NOfMinimum
	{
		get
		{
			return this._NOfMinimum;
		}
		set
		{
			if ((this._NOfMinimum != value))
			{
				this.OnNOfMinimumChanging(value);
				this.SendPropertyChanging();
				this._NOfMinimum = value;
				this.SendPropertyChanged("NOfMinimum");
				this.OnNOfMinimumChanged();
			}
		}
	}
	
	[Column(Storage="_NOfCancelled", DbType="Int NOT NULL")]
	public int NOfCancelled
	{
		get
		{
			return this._NOfCancelled;
		}
		set
		{
			if ((this._NOfCancelled != value))
			{
				this.OnNOfCancelledChanging(value);
				this.SendPropertyChanging();
				this._NOfCancelled = value;
				this.SendPropertyChanged("NOfCancelled");
				this.OnNOfCancelledChanged();
			}
		}
	}
	
	[Column(Storage="_Conditions", DbType="NVarChar(MAX)")]
	public string Conditions
	{
		get
		{
			return this._Conditions;
		}
		set
		{
			if ((this._Conditions != value))
			{
				this.OnConditionsChanging(value);
				this.SendPropertyChanging();
				this._Conditions = value;
				this.SendPropertyChanged("Conditions");
				this.OnConditionsChanged();
			}
		}
	}
	
	[Column(Storage="_Status", DbType="TinyInt NOT NULL")]
	public byte Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[Column(Storage="_Location", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
	public string Location
	{
		get
		{
			return this._Location;
		}
		set
		{
			if ((this._Location != value))
			{
				this.OnLocationChanging(value);
				this.SendPropertyChanging();
				this._Location = value;
				this.SendPropertyChanged("Location");
				this.OnLocationChanged();
			}
		}
	}
	
	[Column(Storage="_Type", DbType="TinyInt NOT NULL")]
	public byte Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Column(Storage="_Price", DbType="Money NOT NULL")]
	public decimal Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this.OnPriceChanging(value);
				this.SendPropertyChanging();
				this._Price = value;
				this.SendPropertyChanged("Price");
				this.OnPriceChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="NVarChar(MAX)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Column(Storage="_isMainEvent", DbType="Bit NOT NULL")]
	public bool isMainEvent
	{
		get
		{
			return this._isMainEvent;
		}
		set
		{
			if ((this._isMainEvent != value))
			{
				this.OnisMainEventChanging(value);
				this.SendPropertyChanging();
				this._isMainEvent = value;
				this.SendPropertyChanged("isMainEvent");
				this.OnisMainEventChanged();
			}
		}
	}
	
	[Association(Name="Event_DiscountSubEvent", Storage="_DiscountSubEvents", OtherKey="EventId")]
	public EntitySet<DiscountSubEvent> DiscountSubEvents
	{
		get
		{
			return this._DiscountSubEvents;
		}
		set
		{
			this._DiscountSubEvents.Assign(value);
		}
	}
	
	[Association(Name="Event_EventImage", Storage="_EventImages", OtherKey="EventID")]
	public EntitySet<EventImage> EventImages
	{
		get
		{
			return this._EventImages;
		}
		set
		{
			this._EventImages.Assign(value);
		}
	}
	
	[Association(Name="Event_EventOrganization", Storage="_EventOrganizations", OtherKey="EventID")]
	public EntitySet<EventOrganization> EventOrganizations
	{
		get
		{
			return this._EventOrganizations;
		}
		set
		{
			this._EventOrganizations.Assign(value);
		}
	}
	
	[Association(Name="Event_EventOrganizer", Storage="_EventOrganizers", OtherKey="EventID")]
	public EntitySet<EventOrganizer> EventOrganizers
	{
		get
		{
			return this._EventOrganizers;
		}
		set
		{
			this._EventOrganizers.Assign(value);
		}
	}
	
	[Association(Name="Event_EventPlacesToMeet", Storage="_EventPlacesToMeets", OtherKey="EventID")]
	public EntitySet<EventPlacesToMeet> EventPlacesToMeets
	{
		get
		{
			return this._EventPlacesToMeets;
		}
		set
		{
			this._EventPlacesToMeets.Assign(value);
		}
	}
	
	[Association(Name="Event_Event", Storage="_Events", OtherKey="ParentEventID")]
	public EntitySet<Event> Events
	{
		get
		{
			return this._Events;
		}
		set
		{
			this._Events.Assign(value);
		}
	}
	
	[Association(Name="Event_ListsOfParticipant", Storage="_ListsOfParticipants", OtherKey="EventID")]
	public EntitySet<ListsOfParticipant> ListsOfParticipants
	{
		get
		{
			return this._ListsOfParticipants;
		}
		set
		{
			this._ListsOfParticipants.Assign(value);
		}
	}
	
	[Association(Name="Event_Event", Storage="_Event1", ThisKey="ParentEventID", IsForeignKey=true)]
	public Event Event1
	{
		get
		{
			return this._Event1.Entity;
		}
		set
		{
			Event previousValue = this._Event1.Entity;
			if (((previousValue != value) 
						|| (this._Event1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Event1.Entity = null;
					previousValue.Events.Remove(this);
				}
				this._Event1.Entity = value;
				if ((value != null))
				{
					value.Events.Add(this);
					this._ParentEventID = value.ID;
				}
				else
				{
					this._ParentEventID = default(Nullable<long>);
				}
				this.SendPropertyChanged("Event1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_DiscountSubEvents(DiscountSubEvent entity)
	{
		this.SendPropertyChanging();
		entity.Event = this;
	}
	
	private void detach_DiscountSubEvents(DiscountSubEvent entity)
	{
		this.SendPropertyChanging();
		entity.Event = null;
	}
	
	private void attach_EventImages(EventImage entity)
	{
		this.SendPropertyChanging();
		entity.Event = this;
	}
	
	private void detach_EventImages(EventImage entity)
	{
		this.SendPropertyChanging();
		entity.Event = null;
	}
	
	private void attach_EventOrganizations(EventOrganization entity)
	{
		this.SendPropertyChanging();
		entity.Event = this;
	}
	
	private void detach_EventOrganizations(EventOrganization entity)
	{
		this.SendPropertyChanging();
		entity.Event = null;
	}
	
	private void attach_EventOrganizers(EventOrganizer entity)
	{
		this.SendPropertyChanging();
		entity.Event = this;
	}
	
	private void detach_EventOrganizers(EventOrganizer entity)
	{
		this.SendPropertyChanging();
		entity.Event = null;
	}
	
	private void attach_EventPlacesToMeets(EventPlacesToMeet entity)
	{
		this.SendPropertyChanging();
		entity.Event = this;
	}
	
	private void detach_EventPlacesToMeets(EventPlacesToMeet entity)
	{
		this.SendPropertyChanging();
		entity.Event = null;
	}
	
	private void attach_Events(Event entity)
	{
		this.SendPropertyChanging();
		entity.Event1 = this;
	}
	
	private void detach_Events(Event entity)
	{
		this.SendPropertyChanging();
		entity.Event1 = null;
	}
	
	private void attach_ListsOfParticipants(ListsOfParticipant entity)
	{
		this.SendPropertyChanging();
		entity.Event = this;
	}
	
	private void detach_ListsOfParticipants(ListsOfParticipant entity)
	{
		this.SendPropertyChanging();
		entity.Event = null;
	}
}

[Table(Name="dbo.Images")]
public partial class Image : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _EventID;
	
	private System.Nullable<int> _Name;
	
	private string _URL;
	
	private string _Description;
	
	private long _ID;
	
	private EntitySet<EventImage> _EventImages;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIDChanging(long value);
    partial void OnEventIDChanged();
    partial void OnNameChanging(System.Nullable<int> value);
    partial void OnNameChanged();
    partial void OnURLChanging(string value);
    partial void OnURLChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    #endregion
	
	public Image()
	{
		this._EventImages = new EntitySet<EventImage>(new Action<EventImage>(this.attach_EventImages), new Action<EventImage>(this.detach_EventImages));
		OnCreated();
	}
	
	[Column(Storage="_EventID", DbType="BigInt NOT NULL")]
	public long EventID
	{
		get
		{
			return this._EventID;
		}
		set
		{
			if ((this._EventID != value))
			{
				this.OnEventIDChanging(value);
				this.SendPropertyChanging();
				this._EventID = value;
				this.SendPropertyChanged("EventID");
				this.OnEventIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="Int")]
	public System.Nullable<int> Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_URL", DbType="NVarChar(200)")]
	public string URL
	{
		get
		{
			return this._URL;
		}
		set
		{
			if ((this._URL != value))
			{
				this.OnURLChanging(value);
				this.SendPropertyChanging();
				this._URL = value;
				this.SendPropertyChanged("URL");
				this.OnURLChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="NVarChar(200)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Association(Name="Image_EventImage", Storage="_EventImages", OtherKey="ImageID")]
	public EntitySet<EventImage> EventImages
	{
		get
		{
			return this._EventImages;
		}
		set
		{
			this._EventImages.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_EventImages(EventImage entity)
	{
		this.SendPropertyChanging();
		entity.Image = this;
	}
	
	private void detach_EventImages(EventImage entity)
	{
		this.SendPropertyChanging();
		entity.Image = null;
	}
}

[Table(Name="dbo.ListsOfParticipants")]
public partial class ListsOfParticipant : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _EventID;
	
	private bool _Interested;
	
	private bool _Paid;
	
	private bool _Canceled;
	
	private System.Guid _UserID;
	
	private bool _Pending;
	
	private EntityRef<Event> _Event;
	
	private EntityRef<aspnet_User> _aspnet_User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIDChanging(long value);
    partial void OnEventIDChanged();
    partial void OnInterestedChanging(bool value);
    partial void OnInterestedChanged();
    partial void OnPaidChanging(bool value);
    partial void OnPaidChanged();
    partial void OnCanceledChanging(bool value);
    partial void OnCanceledChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnPendingChanging(bool value);
    partial void OnPendingChanged();
    #endregion
	
	public ListsOfParticipant()
	{
		this._Event = default(EntityRef<Event>);
		this._aspnet_User = default(EntityRef<aspnet_User>);
		OnCreated();
	}
	
	[Column(Storage="_EventID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
	public long EventID
	{
		get
		{
			return this._EventID;
		}
		set
		{
			if ((this._EventID != value))
			{
				if (this._Event.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEventIDChanging(value);
				this.SendPropertyChanging();
				this._EventID = value;
				this.SendPropertyChanged("EventID");
				this.OnEventIDChanged();
			}
		}
	}
	
	[Column(Storage="_Interested", DbType="Bit NOT NULL")]
	public bool Interested
	{
		get
		{
			return this._Interested;
		}
		set
		{
			if ((this._Interested != value))
			{
				this.OnInterestedChanging(value);
				this.SendPropertyChanging();
				this._Interested = value;
				this.SendPropertyChanged("Interested");
				this.OnInterestedChanged();
			}
		}
	}
	
	[Column(Storage="_Paid", DbType="Bit NOT NULL")]
	public bool Paid
	{
		get
		{
			return this._Paid;
		}
		set
		{
			if ((this._Paid != value))
			{
				this.OnPaidChanging(value);
				this.SendPropertyChanging();
				this._Paid = value;
				this.SendPropertyChanged("Paid");
				this.OnPaidChanged();
			}
		}
	}
	
	[Column(Storage="_Canceled", DbType="Bit NOT NULL")]
	public bool Canceled
	{
		get
		{
			return this._Canceled;
		}
		set
		{
			if ((this._Canceled != value))
			{
				this.OnCanceledChanging(value);
				this.SendPropertyChanging();
				this._Canceled = value;
				this.SendPropertyChanged("Canceled");
				this.OnCanceledChanged();
			}
		}
	}
	
	[Column(Storage="_UserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				if (this._aspnet_User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_Pending", DbType="Bit NOT NULL")]
	public bool Pending
	{
		get
		{
			return this._Pending;
		}
		set
		{
			if ((this._Pending != value))
			{
				this.OnPendingChanging(value);
				this.SendPropertyChanging();
				this._Pending = value;
				this.SendPropertyChanged("Pending");
				this.OnPendingChanged();
			}
		}
	}
	
	[Association(Name="Event_ListsOfParticipant", Storage="_Event", ThisKey="EventID", IsForeignKey=true)]
	public Event Event
	{
		get
		{
			return this._Event.Entity;
		}
		set
		{
			Event previousValue = this._Event.Entity;
			if (((previousValue != value) 
						|| (this._Event.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Event.Entity = null;
					previousValue.ListsOfParticipants.Remove(this);
				}
				this._Event.Entity = value;
				if ((value != null))
				{
					value.ListsOfParticipants.Add(this);
					this._EventID = value.ID;
				}
				else
				{
					this._EventID = default(long);
				}
				this.SendPropertyChanged("Event");
			}
		}
	}
	
	[Association(Name="aspnet_User_ListsOfParticipant", Storage="_aspnet_User", ThisKey="UserID", IsForeignKey=true)]
	public aspnet_User aspnet_User
	{
		get
		{
			return this._aspnet_User.Entity;
		}
		set
		{
			aspnet_User previousValue = this._aspnet_User.Entity;
			if (((previousValue != value) 
						|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._aspnet_User.Entity = null;
					previousValue.ListsOfParticipants.Remove(this);
				}
				this._aspnet_User.Entity = value;
				if ((value != null))
				{
					value.ListsOfParticipants.Add(this);
					this._UserID = value.UserId;
				}
				else
				{
					this._UserID = default(System.Guid);
				}
				this.SendPropertyChanged("aspnet_User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.OrganizationContactPeople")]
public partial class OrganizationContactPeople : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ID;
	
	private System.Guid _UserID;
	
	private long _OrganizationID;
	
	private EntityRef<Organization> _Organization;
	
	private EntityRef<aspnet_User> _aspnet_User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnOrganizationIDChanging(long value);
    partial void OnOrganizationIDChanged();
    #endregion
	
	public OrganizationContactPeople()
	{
		this._Organization = default(EntityRef<Organization>);
		this._aspnet_User = default(EntityRef<aspnet_User>);
		OnCreated();
	}
	
	[Column(Storage="_ID", DbType="BigInt NOT NULL")]
	public long ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_UserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				if (this._aspnet_User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_OrganizationID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
	public long OrganizationID
	{
		get
		{
			return this._OrganizationID;
		}
		set
		{
			if ((this._OrganizationID != value))
			{
				if (this._Organization.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnOrganizationIDChanging(value);
				this.SendPropertyChanging();
				this._OrganizationID = value;
				this.SendPropertyChanged("OrganizationID");
				this.OnOrganizationIDChanged();
			}
		}
	}
	
	[Association(Name="Organization_OrganizationContactPeople", Storage="_Organization", ThisKey="OrganizationID", IsForeignKey=true)]
	public Organization Organization
	{
		get
		{
			return this._Organization.Entity;
		}
		set
		{
			Organization previousValue = this._Organization.Entity;
			if (((previousValue != value) 
						|| (this._Organization.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Organization.Entity = null;
					previousValue.OrganizationContactPeoples.Remove(this);
				}
				this._Organization.Entity = value;
				if ((value != null))
				{
					value.OrganizationContactPeoples.Add(this);
					this._OrganizationID = value.ID;
				}
				else
				{
					this._OrganizationID = default(long);
				}
				this.SendPropertyChanged("Organization");
			}
		}
	}
	
	[Association(Name="aspnet_User_OrganizationContactPeople", Storage="_aspnet_User", ThisKey="UserID", IsForeignKey=true)]
	public aspnet_User aspnet_User
	{
		get
		{
			return this._aspnet_User.Entity;
		}
		set
		{
			aspnet_User previousValue = this._aspnet_User.Entity;
			if (((previousValue != value) 
						|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._aspnet_User.Entity = null;
					previousValue.OrganizationContactPeoples.Remove(this);
				}
				this._aspnet_User.Entity = value;
				if ((value != null))
				{
					value.OrganizationContactPeoples.Add(this);
					this._UserID = value.UserId;
				}
				else
				{
					this._UserID = default(System.Guid);
				}
				this.SendPropertyChanged("aspnet_User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.aspnet_Applications")]
public partial class aspnet_Application : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _ApplicationName;
	
	private string _LoweredApplicationName;
	
	private System.Guid _ApplicationId;
	
	private string _Description;
	
	private EntitySet<aspnet_Membership> _aspnet_Memberships;
	
	private EntitySet<aspnet_Path> _aspnet_Paths;
	
	private EntitySet<aspnet_Role> _aspnet_Roles;
	
	private EntitySet<aspnet_User> _aspnet_Users;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationNameChanging(string value);
    partial void OnApplicationNameChanged();
    partial void OnLoweredApplicationNameChanging(string value);
    partial void OnLoweredApplicationNameChanged();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
	
	public aspnet_Application()
	{
		this._aspnet_Memberships = new EntitySet<aspnet_Membership>(new Action<aspnet_Membership>(this.attach_aspnet_Memberships), new Action<aspnet_Membership>(this.detach_aspnet_Memberships));
		this._aspnet_Paths = new EntitySet<aspnet_Path>(new Action<aspnet_Path>(this.attach_aspnet_Paths), new Action<aspnet_Path>(this.detach_aspnet_Paths));
		this._aspnet_Roles = new EntitySet<aspnet_Role>(new Action<aspnet_Role>(this.attach_aspnet_Roles), new Action<aspnet_Role>(this.detach_aspnet_Roles));
		this._aspnet_Users = new EntitySet<aspnet_User>(new Action<aspnet_User>(this.attach_aspnet_Users), new Action<aspnet_User>(this.detach_aspnet_Users));
		OnCreated();
	}
	
	[Column(Storage="_ApplicationName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
	public string ApplicationName
	{
		get
		{
			return this._ApplicationName;
		}
		set
		{
			if ((this._ApplicationName != value))
			{
				this.OnApplicationNameChanging(value);
				this.SendPropertyChanging();
				this._ApplicationName = value;
				this.SendPropertyChanged("ApplicationName");
				this.OnApplicationNameChanged();
			}
		}
	}
	
	[Column(Storage="_LoweredApplicationName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
	public string LoweredApplicationName
	{
		get
		{
			return this._LoweredApplicationName;
		}
		set
		{
			if ((this._LoweredApplicationName != value))
			{
				this.OnLoweredApplicationNameChanging(value);
				this.SendPropertyChanging();
				this._LoweredApplicationName = value;
				this.SendPropertyChanged("LoweredApplicationName");
				this.OnLoweredApplicationNameChanged();
			}
		}
	}
	
	[Column(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid ApplicationId
	{
		get
		{
			return this._ApplicationId;
		}
		set
		{
			if ((this._ApplicationId != value))
			{
				this.OnApplicationIdChanging(value);
				this.SendPropertyChanging();
				this._ApplicationId = value;
				this.SendPropertyChanged("ApplicationId");
				this.OnApplicationIdChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="NVarChar(256)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Association(Name="aspnet_Application_aspnet_Membership", Storage="_aspnet_Memberships", OtherKey="ApplicationId")]
	public EntitySet<aspnet_Membership> aspnet_Memberships
	{
		get
		{
			return this._aspnet_Memberships;
		}
		set
		{
			this._aspnet_Memberships.Assign(value);
		}
	}
	
	[Association(Name="aspnet_Application_aspnet_Path", Storage="_aspnet_Paths", OtherKey="ApplicationId")]
	public EntitySet<aspnet_Path> aspnet_Paths
	{
		get
		{
			return this._aspnet_Paths;
		}
		set
		{
			this._aspnet_Paths.Assign(value);
		}
	}
	
	[Association(Name="aspnet_Application_aspnet_Role", Storage="_aspnet_Roles", OtherKey="ApplicationId")]
	public EntitySet<aspnet_Role> aspnet_Roles
	{
		get
		{
			return this._aspnet_Roles;
		}
		set
		{
			this._aspnet_Roles.Assign(value);
		}
	}
	
	[Association(Name="aspnet_Application_aspnet_User", Storage="_aspnet_Users", OtherKey="ApplicationId")]
	public EntitySet<aspnet_User> aspnet_Users
	{
		get
		{
			return this._aspnet_Users;
		}
		set
		{
			this._aspnet_Users.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_aspnet_Memberships(aspnet_Membership entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_Application = this;
	}
	
	private void detach_aspnet_Memberships(aspnet_Membership entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_Application = null;
	}
	
	private void attach_aspnet_Paths(aspnet_Path entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_Application = this;
	}
	
	private void detach_aspnet_Paths(aspnet_Path entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_Application = null;
	}
	
	private void attach_aspnet_Roles(aspnet_Role entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_Application = this;
	}
	
	private void detach_aspnet_Roles(aspnet_Role entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_Application = null;
	}
	
	private void attach_aspnet_Users(aspnet_User entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_Application = this;
	}
	
	private void detach_aspnet_Users(aspnet_User entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_Application = null;
	}
}

[Table(Name="dbo.aspnet_WebEvent_Events")]
public partial class aspnet_WebEvent_Event : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _EventId;
	
	private System.DateTime _EventTimeUtc;
	
	private System.DateTime _EventTime;
	
	private string _EventType;
	
	private decimal _EventSequence;
	
	private decimal _EventOccurrence;
	
	private int _EventCode;
	
	private int _EventDetailCode;
	
	private string _Message;
	
	private string _ApplicationPath;
	
	private string _ApplicationVirtualPath;
	
	private string _MachineName;
	
	private string _RequestUrl;
	
	private string _ExceptionType;
	
	private string _Details;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIdChanging(string value);
    partial void OnEventIdChanged();
    partial void OnEventTimeUtcChanging(System.DateTime value);
    partial void OnEventTimeUtcChanged();
    partial void OnEventTimeChanging(System.DateTime value);
    partial void OnEventTimeChanged();
    partial void OnEventTypeChanging(string value);
    partial void OnEventTypeChanged();
    partial void OnEventSequenceChanging(decimal value);
    partial void OnEventSequenceChanged();
    partial void OnEventOccurrenceChanging(decimal value);
    partial void OnEventOccurrenceChanged();
    partial void OnEventCodeChanging(int value);
    partial void OnEventCodeChanged();
    partial void OnEventDetailCodeChanging(int value);
    partial void OnEventDetailCodeChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnApplicationPathChanging(string value);
    partial void OnApplicationPathChanged();
    partial void OnApplicationVirtualPathChanging(string value);
    partial void OnApplicationVirtualPathChanged();
    partial void OnMachineNameChanging(string value);
    partial void OnMachineNameChanged();
    partial void OnRequestUrlChanging(string value);
    partial void OnRequestUrlChanged();
    partial void OnExceptionTypeChanging(string value);
    partial void OnExceptionTypeChanged();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    #endregion
	
	public aspnet_WebEvent_Event()
	{
		OnCreated();
	}
	
	[Column(Storage="_EventId", DbType="Char(32) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string EventId
	{
		get
		{
			return this._EventId;
		}
		set
		{
			if ((this._EventId != value))
			{
				this.OnEventIdChanging(value);
				this.SendPropertyChanging();
				this._EventId = value;
				this.SendPropertyChanged("EventId");
				this.OnEventIdChanged();
			}
		}
	}
	
	[Column(Storage="_EventTimeUtc", DbType="DateTime NOT NULL")]
	public System.DateTime EventTimeUtc
	{
		get
		{
			return this._EventTimeUtc;
		}
		set
		{
			if ((this._EventTimeUtc != value))
			{
				this.OnEventTimeUtcChanging(value);
				this.SendPropertyChanging();
				this._EventTimeUtc = value;
				this.SendPropertyChanged("EventTimeUtc");
				this.OnEventTimeUtcChanged();
			}
		}
	}
	
	[Column(Storage="_EventTime", DbType="DateTime NOT NULL")]
	public System.DateTime EventTime
	{
		get
		{
			return this._EventTime;
		}
		set
		{
			if ((this._EventTime != value))
			{
				this.OnEventTimeChanging(value);
				this.SendPropertyChanging();
				this._EventTime = value;
				this.SendPropertyChanged("EventTime");
				this.OnEventTimeChanged();
			}
		}
	}
	
	[Column(Storage="_EventType", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
	public string EventType
	{
		get
		{
			return this._EventType;
		}
		set
		{
			if ((this._EventType != value))
			{
				this.OnEventTypeChanging(value);
				this.SendPropertyChanging();
				this._EventType = value;
				this.SendPropertyChanged("EventType");
				this.OnEventTypeChanged();
			}
		}
	}
	
	[Column(Storage="_EventSequence", DbType="Decimal(19,0) NOT NULL")]
	public decimal EventSequence
	{
		get
		{
			return this._EventSequence;
		}
		set
		{
			if ((this._EventSequence != value))
			{
				this.OnEventSequenceChanging(value);
				this.SendPropertyChanging();
				this._EventSequence = value;
				this.SendPropertyChanged("EventSequence");
				this.OnEventSequenceChanged();
			}
		}
	}
	
	[Column(Storage="_EventOccurrence", DbType="Decimal(19,0) NOT NULL")]
	public decimal EventOccurrence
	{
		get
		{
			return this._EventOccurrence;
		}
		set
		{
			if ((this._EventOccurrence != value))
			{
				this.OnEventOccurrenceChanging(value);
				this.SendPropertyChanging();
				this._EventOccurrence = value;
				this.SendPropertyChanged("EventOccurrence");
				this.OnEventOccurrenceChanged();
			}
		}
	}
	
	[Column(Storage="_EventCode", DbType="Int NOT NULL")]
	public int EventCode
	{
		get
		{
			return this._EventCode;
		}
		set
		{
			if ((this._EventCode != value))
			{
				this.OnEventCodeChanging(value);
				this.SendPropertyChanging();
				this._EventCode = value;
				this.SendPropertyChanged("EventCode");
				this.OnEventCodeChanged();
			}
		}
	}
	
	[Column(Storage="_EventDetailCode", DbType="Int NOT NULL")]
	public int EventDetailCode
	{
		get
		{
			return this._EventDetailCode;
		}
		set
		{
			if ((this._EventDetailCode != value))
			{
				this.OnEventDetailCodeChanging(value);
				this.SendPropertyChanging();
				this._EventDetailCode = value;
				this.SendPropertyChanged("EventDetailCode");
				this.OnEventDetailCodeChanged();
			}
		}
	}
	
	[Column(Storage="_Message", DbType="NVarChar(1024)")]
	public string Message
	{
		get
		{
			return this._Message;
		}
		set
		{
			if ((this._Message != value))
			{
				this.OnMessageChanging(value);
				this.SendPropertyChanging();
				this._Message = value;
				this.SendPropertyChanged("Message");
				this.OnMessageChanged();
			}
		}
	}
	
	[Column(Storage="_ApplicationPath", DbType="NVarChar(256)")]
	public string ApplicationPath
	{
		get
		{
			return this._ApplicationPath;
		}
		set
		{
			if ((this._ApplicationPath != value))
			{
				this.OnApplicationPathChanging(value);
				this.SendPropertyChanging();
				this._ApplicationPath = value;
				this.SendPropertyChanged("ApplicationPath");
				this.OnApplicationPathChanged();
			}
		}
	}
	
	[Column(Storage="_ApplicationVirtualPath", DbType="NVarChar(256)")]
	public string ApplicationVirtualPath
	{
		get
		{
			return this._ApplicationVirtualPath;
		}
		set
		{
			if ((this._ApplicationVirtualPath != value))
			{
				this.OnApplicationVirtualPathChanging(value);
				this.SendPropertyChanging();
				this._ApplicationVirtualPath = value;
				this.SendPropertyChanged("ApplicationVirtualPath");
				this.OnApplicationVirtualPathChanged();
			}
		}
	}
	
	[Column(Storage="_MachineName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
	public string MachineName
	{
		get
		{
			return this._MachineName;
		}
		set
		{
			if ((this._MachineName != value))
			{
				this.OnMachineNameChanging(value);
				this.SendPropertyChanging();
				this._MachineName = value;
				this.SendPropertyChanged("MachineName");
				this.OnMachineNameChanged();
			}
		}
	}
	
	[Column(Storage="_RequestUrl", DbType="NVarChar(1024)")]
	public string RequestUrl
	{
		get
		{
			return this._RequestUrl;
		}
		set
		{
			if ((this._RequestUrl != value))
			{
				this.OnRequestUrlChanging(value);
				this.SendPropertyChanging();
				this._RequestUrl = value;
				this.SendPropertyChanged("RequestUrl");
				this.OnRequestUrlChanged();
			}
		}
	}
	
	[Column(Storage="_ExceptionType", DbType="NVarChar(256)")]
	public string ExceptionType
	{
		get
		{
			return this._ExceptionType;
		}
		set
		{
			if ((this._ExceptionType != value))
			{
				this.OnExceptionTypeChanging(value);
				this.SendPropertyChanging();
				this._ExceptionType = value;
				this.SendPropertyChanged("ExceptionType");
				this.OnExceptionTypeChanged();
			}
		}
	}
	
	[Column(Storage="_Details", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string Details
	{
		get
		{
			return this._Details;
		}
		set
		{
			if ((this._Details != value))
			{
				this.OnDetailsChanging(value);
				this.SendPropertyChanging();
				this._Details = value;
				this.SendPropertyChanged("Details");
				this.OnDetailsChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.aspnet_Membership")]
public partial class aspnet_Membership : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ApplicationId;
	
	private System.Guid _UserId;
	
	private string _Password;
	
	private int _PasswordFormat;
	
	private string _PasswordSalt;
	
	private string _MobilePIN;
	
	private string _Email;
	
	private string _LoweredEmail;
	
	private string _PasswordQuestion;
	
	private string _PasswordAnswer;
	
	private bool _IsApproved;
	
	private bool _IsLockedOut;
	
	private System.DateTime _CreateDate;
	
	private System.DateTime _LastLoginDate;
	
	private System.DateTime _LastPasswordChangedDate;
	
	private System.DateTime _LastLockoutDate;
	
	private int _FailedPasswordAttemptCount;
	
	private System.DateTime _FailedPasswordAttemptWindowStart;
	
	private int _FailedPasswordAnswerAttemptCount;
	
	private System.DateTime _FailedPasswordAnswerAttemptWindowStart;
	
	private string _Comment;
	
	private EntityRef<aspnet_Application> _aspnet_Application;
	
	private EntityRef<aspnet_User> _aspnet_User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPasswordFormatChanging(int value);
    partial void OnPasswordFormatChanged();
    partial void OnPasswordSaltChanging(string value);
    partial void OnPasswordSaltChanged();
    partial void OnMobilePINChanging(string value);
    partial void OnMobilePINChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnLoweredEmailChanging(string value);
    partial void OnLoweredEmailChanged();
    partial void OnPasswordQuestionChanging(string value);
    partial void OnPasswordQuestionChanged();
    partial void OnPasswordAnswerChanging(string value);
    partial void OnPasswordAnswerChanged();
    partial void OnIsApprovedChanging(bool value);
    partial void OnIsApprovedChanged();
    partial void OnIsLockedOutChanging(bool value);
    partial void OnIsLockedOutChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnLastLoginDateChanging(System.DateTime value);
    partial void OnLastLoginDateChanged();
    partial void OnLastPasswordChangedDateChanging(System.DateTime value);
    partial void OnLastPasswordChangedDateChanged();
    partial void OnLastLockoutDateChanging(System.DateTime value);
    partial void OnLastLockoutDateChanged();
    partial void OnFailedPasswordAttemptCountChanging(int value);
    partial void OnFailedPasswordAttemptCountChanged();
    partial void OnFailedPasswordAttemptWindowStartChanging(System.DateTime value);
    partial void OnFailedPasswordAttemptWindowStartChanged();
    partial void OnFailedPasswordAnswerAttemptCountChanging(int value);
    partial void OnFailedPasswordAnswerAttemptCountChanged();
    partial void OnFailedPasswordAnswerAttemptWindowStartChanging(System.DateTime value);
    partial void OnFailedPasswordAnswerAttemptWindowStartChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
	
	public aspnet_Membership()
	{
		this._aspnet_Application = default(EntityRef<aspnet_Application>);
		this._aspnet_User = default(EntityRef<aspnet_User>);
		OnCreated();
	}
	
	[Column(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
	public System.Guid ApplicationId
	{
		get
		{
			return this._ApplicationId;
		}
		set
		{
			if ((this._ApplicationId != value))
			{
				if (this._aspnet_Application.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnApplicationIdChanging(value);
				this.SendPropertyChanging();
				this._ApplicationId = value;
				this.SendPropertyChanged("ApplicationId");
				this.OnApplicationIdChanged();
			}
		}
	}
	
	[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid UserId
	{
		get
		{
			return this._UserId;
		}
		set
		{
			if ((this._UserId != value))
			{
				if (this._aspnet_User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIdChanging(value);
				this.SendPropertyChanging();
				this._UserId = value;
				this.SendPropertyChanged("UserId");
				this.OnUserIdChanged();
			}
		}
	}
	
	[Column(Storage="_Password", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[Column(Storage="_PasswordFormat", DbType="Int NOT NULL")]
	public int PasswordFormat
	{
		get
		{
			return this._PasswordFormat;
		}
		set
		{
			if ((this._PasswordFormat != value))
			{
				this.OnPasswordFormatChanging(value);
				this.SendPropertyChanging();
				this._PasswordFormat = value;
				this.SendPropertyChanged("PasswordFormat");
				this.OnPasswordFormatChanged();
			}
		}
	}
	
	[Column(Storage="_PasswordSalt", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
	public string PasswordSalt
	{
		get
		{
			return this._PasswordSalt;
		}
		set
		{
			if ((this._PasswordSalt != value))
			{
				this.OnPasswordSaltChanging(value);
				this.SendPropertyChanging();
				this._PasswordSalt = value;
				this.SendPropertyChanged("PasswordSalt");
				this.OnPasswordSaltChanged();
			}
		}
	}
	
	[Column(Storage="_MobilePIN", DbType="NVarChar(16)")]
	public string MobilePIN
	{
		get
		{
			return this._MobilePIN;
		}
		set
		{
			if ((this._MobilePIN != value))
			{
				this.OnMobilePINChanging(value);
				this.SendPropertyChanging();
				this._MobilePIN = value;
				this.SendPropertyChanged("MobilePIN");
				this.OnMobilePINChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="NVarChar(256)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_LoweredEmail", DbType="NVarChar(256)")]
	public string LoweredEmail
	{
		get
		{
			return this._LoweredEmail;
		}
		set
		{
			if ((this._LoweredEmail != value))
			{
				this.OnLoweredEmailChanging(value);
				this.SendPropertyChanging();
				this._LoweredEmail = value;
				this.SendPropertyChanged("LoweredEmail");
				this.OnLoweredEmailChanged();
			}
		}
	}
	
	[Column(Storage="_PasswordQuestion", DbType="NVarChar(256)")]
	public string PasswordQuestion
	{
		get
		{
			return this._PasswordQuestion;
		}
		set
		{
			if ((this._PasswordQuestion != value))
			{
				this.OnPasswordQuestionChanging(value);
				this.SendPropertyChanging();
				this._PasswordQuestion = value;
				this.SendPropertyChanged("PasswordQuestion");
				this.OnPasswordQuestionChanged();
			}
		}
	}
	
	[Column(Storage="_PasswordAnswer", DbType="NVarChar(128)")]
	public string PasswordAnswer
	{
		get
		{
			return this._PasswordAnswer;
		}
		set
		{
			if ((this._PasswordAnswer != value))
			{
				this.OnPasswordAnswerChanging(value);
				this.SendPropertyChanging();
				this._PasswordAnswer = value;
				this.SendPropertyChanged("PasswordAnswer");
				this.OnPasswordAnswerChanged();
			}
		}
	}
	
	[Column(Storage="_IsApproved", DbType="Bit NOT NULL")]
	public bool IsApproved
	{
		get
		{
			return this._IsApproved;
		}
		set
		{
			if ((this._IsApproved != value))
			{
				this.OnIsApprovedChanging(value);
				this.SendPropertyChanging();
				this._IsApproved = value;
				this.SendPropertyChanged("IsApproved");
				this.OnIsApprovedChanged();
			}
		}
	}
	
	[Column(Storage="_IsLockedOut", DbType="Bit NOT NULL")]
	public bool IsLockedOut
	{
		get
		{
			return this._IsLockedOut;
		}
		set
		{
			if ((this._IsLockedOut != value))
			{
				this.OnIsLockedOutChanging(value);
				this.SendPropertyChanging();
				this._IsLockedOut = value;
				this.SendPropertyChanged("IsLockedOut");
				this.OnIsLockedOutChanged();
			}
		}
	}
	
	[Column(Storage="_CreateDate", DbType="DateTime NOT NULL")]
	public System.DateTime CreateDate
	{
		get
		{
			return this._CreateDate;
		}
		set
		{
			if ((this._CreateDate != value))
			{
				this.OnCreateDateChanging(value);
				this.SendPropertyChanging();
				this._CreateDate = value;
				this.SendPropertyChanged("CreateDate");
				this.OnCreateDateChanged();
			}
		}
	}
	
	[Column(Storage="_LastLoginDate", DbType="DateTime NOT NULL")]
	public System.DateTime LastLoginDate
	{
		get
		{
			return this._LastLoginDate;
		}
		set
		{
			if ((this._LastLoginDate != value))
			{
				this.OnLastLoginDateChanging(value);
				this.SendPropertyChanging();
				this._LastLoginDate = value;
				this.SendPropertyChanged("LastLoginDate");
				this.OnLastLoginDateChanged();
			}
		}
	}
	
	[Column(Storage="_LastPasswordChangedDate", DbType="DateTime NOT NULL")]
	public System.DateTime LastPasswordChangedDate
	{
		get
		{
			return this._LastPasswordChangedDate;
		}
		set
		{
			if ((this._LastPasswordChangedDate != value))
			{
				this.OnLastPasswordChangedDateChanging(value);
				this.SendPropertyChanging();
				this._LastPasswordChangedDate = value;
				this.SendPropertyChanged("LastPasswordChangedDate");
				this.OnLastPasswordChangedDateChanged();
			}
		}
	}
	
	[Column(Storage="_LastLockoutDate", DbType="DateTime NOT NULL")]
	public System.DateTime LastLockoutDate
	{
		get
		{
			return this._LastLockoutDate;
		}
		set
		{
			if ((this._LastLockoutDate != value))
			{
				this.OnLastLockoutDateChanging(value);
				this.SendPropertyChanging();
				this._LastLockoutDate = value;
				this.SendPropertyChanged("LastLockoutDate");
				this.OnLastLockoutDateChanged();
			}
		}
	}
	
	[Column(Storage="_FailedPasswordAttemptCount", DbType="Int NOT NULL")]
	public int FailedPasswordAttemptCount
	{
		get
		{
			return this._FailedPasswordAttemptCount;
		}
		set
		{
			if ((this._FailedPasswordAttemptCount != value))
			{
				this.OnFailedPasswordAttemptCountChanging(value);
				this.SendPropertyChanging();
				this._FailedPasswordAttemptCount = value;
				this.SendPropertyChanged("FailedPasswordAttemptCount");
				this.OnFailedPasswordAttemptCountChanged();
			}
		}
	}
	
	[Column(Storage="_FailedPasswordAttemptWindowStart", DbType="DateTime NOT NULL")]
	public System.DateTime FailedPasswordAttemptWindowStart
	{
		get
		{
			return this._FailedPasswordAttemptWindowStart;
		}
		set
		{
			if ((this._FailedPasswordAttemptWindowStart != value))
			{
				this.OnFailedPasswordAttemptWindowStartChanging(value);
				this.SendPropertyChanging();
				this._FailedPasswordAttemptWindowStart = value;
				this.SendPropertyChanged("FailedPasswordAttemptWindowStart");
				this.OnFailedPasswordAttemptWindowStartChanged();
			}
		}
	}
	
	[Column(Storage="_FailedPasswordAnswerAttemptCount", DbType="Int NOT NULL")]
	public int FailedPasswordAnswerAttemptCount
	{
		get
		{
			return this._FailedPasswordAnswerAttemptCount;
		}
		set
		{
			if ((this._FailedPasswordAnswerAttemptCount != value))
			{
				this.OnFailedPasswordAnswerAttemptCountChanging(value);
				this.SendPropertyChanging();
				this._FailedPasswordAnswerAttemptCount = value;
				this.SendPropertyChanged("FailedPasswordAnswerAttemptCount");
				this.OnFailedPasswordAnswerAttemptCountChanged();
			}
		}
	}
	
	[Column(Storage="_FailedPasswordAnswerAttemptWindowStart", DbType="DateTime NOT NULL")]
	public System.DateTime FailedPasswordAnswerAttemptWindowStart
	{
		get
		{
			return this._FailedPasswordAnswerAttemptWindowStart;
		}
		set
		{
			if ((this._FailedPasswordAnswerAttemptWindowStart != value))
			{
				this.OnFailedPasswordAnswerAttemptWindowStartChanging(value);
				this.SendPropertyChanging();
				this._FailedPasswordAnswerAttemptWindowStart = value;
				this.SendPropertyChanged("FailedPasswordAnswerAttemptWindowStart");
				this.OnFailedPasswordAnswerAttemptWindowStartChanged();
			}
		}
	}
	
	[Column(Storage="_Comment", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string Comment
	{
		get
		{
			return this._Comment;
		}
		set
		{
			if ((this._Comment != value))
			{
				this.OnCommentChanging(value);
				this.SendPropertyChanging();
				this._Comment = value;
				this.SendPropertyChanged("Comment");
				this.OnCommentChanged();
			}
		}
	}
	
	[Association(Name="aspnet_Application_aspnet_Membership", Storage="_aspnet_Application", ThisKey="ApplicationId", IsForeignKey=true)]
	public aspnet_Application aspnet_Application
	{
		get
		{
			return this._aspnet_Application.Entity;
		}
		set
		{
			aspnet_Application previousValue = this._aspnet_Application.Entity;
			if (((previousValue != value) 
						|| (this._aspnet_Application.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._aspnet_Application.Entity = null;
					previousValue.aspnet_Memberships.Remove(this);
				}
				this._aspnet_Application.Entity = value;
				if ((value != null))
				{
					value.aspnet_Memberships.Add(this);
					this._ApplicationId = value.ApplicationId;
				}
				else
				{
					this._ApplicationId = default(System.Guid);
				}
				this.SendPropertyChanged("aspnet_Application");
			}
		}
	}
	
	[Association(Name="aspnet_User_aspnet_Membership", Storage="_aspnet_User", ThisKey="UserId", IsForeignKey=true)]
	public aspnet_User aspnet_User
	{
		get
		{
			return this._aspnet_User.Entity;
		}
		set
		{
			aspnet_User previousValue = this._aspnet_User.Entity;
			if (((previousValue != value) 
						|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._aspnet_User.Entity = null;
					previousValue.aspnet_Membership = null;
				}
				this._aspnet_User.Entity = value;
				if ((value != null))
				{
					value.aspnet_Membership = this;
					this._UserId = value.UserId;
				}
				else
				{
					this._UserId = default(System.Guid);
				}
				this.SendPropertyChanged("aspnet_User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.aspnet_Paths")]
public partial class aspnet_Path : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ApplicationId;
	
	private System.Guid _PathId;
	
	private string _Path;
	
	private string _LoweredPath;
	
	private EntityRef<aspnet_PersonalizationAllUser> _aspnet_PersonalizationAllUser;
	
	private EntitySet<aspnet_PersonalizationPerUser> _aspnet_PersonalizationPerUsers;
	
	private EntityRef<aspnet_Application> _aspnet_Application;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnPathIdChanging(System.Guid value);
    partial void OnPathIdChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnLoweredPathChanging(string value);
    partial void OnLoweredPathChanged();
    #endregion
	
	public aspnet_Path()
	{
		this._aspnet_PersonalizationAllUser = default(EntityRef<aspnet_PersonalizationAllUser>);
		this._aspnet_PersonalizationPerUsers = new EntitySet<aspnet_PersonalizationPerUser>(new Action<aspnet_PersonalizationPerUser>(this.attach_aspnet_PersonalizationPerUsers), new Action<aspnet_PersonalizationPerUser>(this.detach_aspnet_PersonalizationPerUsers));
		this._aspnet_Application = default(EntityRef<aspnet_Application>);
		OnCreated();
	}
	
	[Column(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
	public System.Guid ApplicationId
	{
		get
		{
			return this._ApplicationId;
		}
		set
		{
			if ((this._ApplicationId != value))
			{
				if (this._aspnet_Application.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnApplicationIdChanging(value);
				this.SendPropertyChanging();
				this._ApplicationId = value;
				this.SendPropertyChanged("ApplicationId");
				this.OnApplicationIdChanged();
			}
		}
	}
	
	[Column(Storage="_PathId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid PathId
	{
		get
		{
			return this._PathId;
		}
		set
		{
			if ((this._PathId != value))
			{
				this.OnPathIdChanging(value);
				this.SendPropertyChanging();
				this._PathId = value;
				this.SendPropertyChanged("PathId");
				this.OnPathIdChanged();
			}
		}
	}
	
	[Column(Storage="_Path", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
	public string Path
	{
		get
		{
			return this._Path;
		}
		set
		{
			if ((this._Path != value))
			{
				this.OnPathChanging(value);
				this.SendPropertyChanging();
				this._Path = value;
				this.SendPropertyChanged("Path");
				this.OnPathChanged();
			}
		}
	}
	
	[Column(Storage="_LoweredPath", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
	public string LoweredPath
	{
		get
		{
			return this._LoweredPath;
		}
		set
		{
			if ((this._LoweredPath != value))
			{
				this.OnLoweredPathChanging(value);
				this.SendPropertyChanging();
				this._LoweredPath = value;
				this.SendPropertyChanged("LoweredPath");
				this.OnLoweredPathChanged();
			}
		}
	}
	
	[Association(Name="aspnet_Path_aspnet_PersonalizationAllUser", Storage="_aspnet_PersonalizationAllUser", ThisKey="PathId", IsUnique=true, IsForeignKey=false)]
	public aspnet_PersonalizationAllUser aspnet_PersonalizationAllUser
	{
		get
		{
			return this._aspnet_PersonalizationAllUser.Entity;
		}
		set
		{
			aspnet_PersonalizationAllUser previousValue = this._aspnet_PersonalizationAllUser.Entity;
			if (((previousValue != value) 
						|| (this._aspnet_PersonalizationAllUser.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._aspnet_PersonalizationAllUser.Entity = null;
					previousValue.aspnet_Path = null;
				}
				this._aspnet_PersonalizationAllUser.Entity = value;
				if ((value != null))
				{
					value.aspnet_Path = this;
				}
				this.SendPropertyChanged("aspnet_PersonalizationAllUser");
			}
		}
	}
	
	[Association(Name="aspnet_Path_aspnet_PersonalizationPerUser", Storage="_aspnet_PersonalizationPerUsers", OtherKey="PathId")]
	public EntitySet<aspnet_PersonalizationPerUser> aspnet_PersonalizationPerUsers
	{
		get
		{
			return this._aspnet_PersonalizationPerUsers;
		}
		set
		{
			this._aspnet_PersonalizationPerUsers.Assign(value);
		}
	}
	
	[Association(Name="aspnet_Application_aspnet_Path", Storage="_aspnet_Application", ThisKey="ApplicationId", IsForeignKey=true)]
	public aspnet_Application aspnet_Application
	{
		get
		{
			return this._aspnet_Application.Entity;
		}
		set
		{
			aspnet_Application previousValue = this._aspnet_Application.Entity;
			if (((previousValue != value) 
						|| (this._aspnet_Application.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._aspnet_Application.Entity = null;
					previousValue.aspnet_Paths.Remove(this);
				}
				this._aspnet_Application.Entity = value;
				if ((value != null))
				{
					value.aspnet_Paths.Add(this);
					this._ApplicationId = value.ApplicationId;
				}
				else
				{
					this._ApplicationId = default(System.Guid);
				}
				this.SendPropertyChanged("aspnet_Application");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_aspnet_PersonalizationPerUsers(aspnet_PersonalizationPerUser entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_Path = this;
	}
	
	private void detach_aspnet_PersonalizationPerUsers(aspnet_PersonalizationPerUser entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_Path = null;
	}
}

[Table(Name="dbo.aspnet_PersonalizationAllUsers")]
public partial class aspnet_PersonalizationAllUser : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _PathId;
	
	private System.Data.Linq.Binary _PageSettings;
	
	private System.DateTime _LastUpdatedDate;
	
	private EntityRef<aspnet_Path> _aspnet_Path;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPathIdChanging(System.Guid value);
    partial void OnPathIdChanged();
    partial void OnPageSettingsChanging(System.Data.Linq.Binary value);
    partial void OnPageSettingsChanged();
    partial void OnLastUpdatedDateChanging(System.DateTime value);
    partial void OnLastUpdatedDateChanged();
    #endregion
	
	public aspnet_PersonalizationAllUser()
	{
		this._aspnet_Path = default(EntityRef<aspnet_Path>);
		OnCreated();
	}
	
	[Column(Storage="_PathId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid PathId
	{
		get
		{
			return this._PathId;
		}
		set
		{
			if ((this._PathId != value))
			{
				if (this._aspnet_Path.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPathIdChanging(value);
				this.SendPropertyChanging();
				this._PathId = value;
				this.SendPropertyChanged("PathId");
				this.OnPathIdChanged();
			}
		}
	}
	
	[Column(Storage="_PageSettings", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary PageSettings
	{
		get
		{
			return this._PageSettings;
		}
		set
		{
			if ((this._PageSettings != value))
			{
				this.OnPageSettingsChanging(value);
				this.SendPropertyChanging();
				this._PageSettings = value;
				this.SendPropertyChanged("PageSettings");
				this.OnPageSettingsChanged();
			}
		}
	}
	
	[Column(Storage="_LastUpdatedDate", DbType="DateTime NOT NULL")]
	public System.DateTime LastUpdatedDate
	{
		get
		{
			return this._LastUpdatedDate;
		}
		set
		{
			if ((this._LastUpdatedDate != value))
			{
				this.OnLastUpdatedDateChanging(value);
				this.SendPropertyChanging();
				this._LastUpdatedDate = value;
				this.SendPropertyChanged("LastUpdatedDate");
				this.OnLastUpdatedDateChanged();
			}
		}
	}
	
	[Association(Name="aspnet_Path_aspnet_PersonalizationAllUser", Storage="_aspnet_Path", ThisKey="PathId", IsForeignKey=true)]
	public aspnet_Path aspnet_Path
	{
		get
		{
			return this._aspnet_Path.Entity;
		}
		set
		{
			aspnet_Path previousValue = this._aspnet_Path.Entity;
			if (((previousValue != value) 
						|| (this._aspnet_Path.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._aspnet_Path.Entity = null;
					previousValue.aspnet_PersonalizationAllUser = null;
				}
				this._aspnet_Path.Entity = value;
				if ((value != null))
				{
					value.aspnet_PersonalizationAllUser = this;
					this._PathId = value.PathId;
				}
				else
				{
					this._PathId = default(System.Guid);
				}
				this.SendPropertyChanged("aspnet_Path");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.aspnet_PersonalizationPerUser")]
public partial class aspnet_PersonalizationPerUser : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _Id;
	
	private System.Nullable<System.Guid> _PathId;
	
	private System.Nullable<System.Guid> _UserId;
	
	private System.Data.Linq.Binary _PageSettings;
	
	private System.DateTime _LastUpdatedDate;
	
	private EntityRef<aspnet_Path> _aspnet_Path;
	
	private EntityRef<aspnet_User> _aspnet_User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnPathIdChanging(System.Nullable<System.Guid> value);
    partial void OnPathIdChanged();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    partial void OnPageSettingsChanging(System.Data.Linq.Binary value);
    partial void OnPageSettingsChanged();
    partial void OnLastUpdatedDateChanging(System.DateTime value);
    partial void OnLastUpdatedDateChanged();
    #endregion
	
	public aspnet_PersonalizationPerUser()
	{
		this._aspnet_Path = default(EntityRef<aspnet_Path>);
		this._aspnet_User = default(EntityRef<aspnet_User>);
		OnCreated();
	}
	
	[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[Column(Storage="_PathId", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> PathId
	{
		get
		{
			return this._PathId;
		}
		set
		{
			if ((this._PathId != value))
			{
				if (this._aspnet_Path.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPathIdChanging(value);
				this.SendPropertyChanging();
				this._PathId = value;
				this.SendPropertyChanged("PathId");
				this.OnPathIdChanged();
			}
		}
	}
	
	[Column(Storage="_UserId", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> UserId
	{
		get
		{
			return this._UserId;
		}
		set
		{
			if ((this._UserId != value))
			{
				if (this._aspnet_User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIdChanging(value);
				this.SendPropertyChanging();
				this._UserId = value;
				this.SendPropertyChanged("UserId");
				this.OnUserIdChanged();
			}
		}
	}
	
	[Column(Storage="_PageSettings", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary PageSettings
	{
		get
		{
			return this._PageSettings;
		}
		set
		{
			if ((this._PageSettings != value))
			{
				this.OnPageSettingsChanging(value);
				this.SendPropertyChanging();
				this._PageSettings = value;
				this.SendPropertyChanged("PageSettings");
				this.OnPageSettingsChanged();
			}
		}
	}
	
	[Column(Storage="_LastUpdatedDate", DbType="DateTime NOT NULL")]
	public System.DateTime LastUpdatedDate
	{
		get
		{
			return this._LastUpdatedDate;
		}
		set
		{
			if ((this._LastUpdatedDate != value))
			{
				this.OnLastUpdatedDateChanging(value);
				this.SendPropertyChanging();
				this._LastUpdatedDate = value;
				this.SendPropertyChanged("LastUpdatedDate");
				this.OnLastUpdatedDateChanged();
			}
		}
	}
	
	[Association(Name="aspnet_Path_aspnet_PersonalizationPerUser", Storage="_aspnet_Path", ThisKey="PathId", IsForeignKey=true)]
	public aspnet_Path aspnet_Path
	{
		get
		{
			return this._aspnet_Path.Entity;
		}
		set
		{
			aspnet_Path previousValue = this._aspnet_Path.Entity;
			if (((previousValue != value) 
						|| (this._aspnet_Path.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._aspnet_Path.Entity = null;
					previousValue.aspnet_PersonalizationPerUsers.Remove(this);
				}
				this._aspnet_Path.Entity = value;
				if ((value != null))
				{
					value.aspnet_PersonalizationPerUsers.Add(this);
					this._PathId = value.PathId;
				}
				else
				{
					this._PathId = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("aspnet_Path");
			}
		}
	}
	
	[Association(Name="aspnet_User_aspnet_PersonalizationPerUser", Storage="_aspnet_User", ThisKey="UserId", IsForeignKey=true)]
	public aspnet_User aspnet_User
	{
		get
		{
			return this._aspnet_User.Entity;
		}
		set
		{
			aspnet_User previousValue = this._aspnet_User.Entity;
			if (((previousValue != value) 
						|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._aspnet_User.Entity = null;
					previousValue.aspnet_PersonalizationPerUsers.Remove(this);
				}
				this._aspnet_User.Entity = value;
				if ((value != null))
				{
					value.aspnet_PersonalizationPerUsers.Add(this);
					this._UserId = value.UserId;
				}
				else
				{
					this._UserId = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("aspnet_User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.aspnet_Profile")]
public partial class aspnet_Profile : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _UserId;
	
	private string _PropertyNames;
	
	private string _PropertyValuesString;
	
	private System.Data.Linq.Binary _PropertyValuesBinary;
	
	private System.DateTime _LastUpdatedDate;
	
	private EntityRef<aspnet_User> _aspnet_User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnPropertyNamesChanging(string value);
    partial void OnPropertyNamesChanged();
    partial void OnPropertyValuesStringChanging(string value);
    partial void OnPropertyValuesStringChanged();
    partial void OnPropertyValuesBinaryChanging(System.Data.Linq.Binary value);
    partial void OnPropertyValuesBinaryChanged();
    partial void OnLastUpdatedDateChanging(System.DateTime value);
    partial void OnLastUpdatedDateChanged();
    #endregion
	
	public aspnet_Profile()
	{
		this._aspnet_User = default(EntityRef<aspnet_User>);
		OnCreated();
	}
	
	[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid UserId
	{
		get
		{
			return this._UserId;
		}
		set
		{
			if ((this._UserId != value))
			{
				if (this._aspnet_User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIdChanging(value);
				this.SendPropertyChanging();
				this._UserId = value;
				this.SendPropertyChanged("UserId");
				this.OnUserIdChanged();
			}
		}
	}
	
	[Column(Storage="_PropertyNames", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string PropertyNames
	{
		get
		{
			return this._PropertyNames;
		}
		set
		{
			if ((this._PropertyNames != value))
			{
				this.OnPropertyNamesChanging(value);
				this.SendPropertyChanging();
				this._PropertyNames = value;
				this.SendPropertyChanged("PropertyNames");
				this.OnPropertyNamesChanged();
			}
		}
	}
	
	[Column(Storage="_PropertyValuesString", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string PropertyValuesString
	{
		get
		{
			return this._PropertyValuesString;
		}
		set
		{
			if ((this._PropertyValuesString != value))
			{
				this.OnPropertyValuesStringChanging(value);
				this.SendPropertyChanging();
				this._PropertyValuesString = value;
				this.SendPropertyChanged("PropertyValuesString");
				this.OnPropertyValuesStringChanged();
			}
		}
	}
	
	[Column(Storage="_PropertyValuesBinary", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary PropertyValuesBinary
	{
		get
		{
			return this._PropertyValuesBinary;
		}
		set
		{
			if ((this._PropertyValuesBinary != value))
			{
				this.OnPropertyValuesBinaryChanging(value);
				this.SendPropertyChanging();
				this._PropertyValuesBinary = value;
				this.SendPropertyChanged("PropertyValuesBinary");
				this.OnPropertyValuesBinaryChanged();
			}
		}
	}
	
	[Column(Storage="_LastUpdatedDate", DbType="DateTime NOT NULL")]
	public System.DateTime LastUpdatedDate
	{
		get
		{
			return this._LastUpdatedDate;
		}
		set
		{
			if ((this._LastUpdatedDate != value))
			{
				this.OnLastUpdatedDateChanging(value);
				this.SendPropertyChanging();
				this._LastUpdatedDate = value;
				this.SendPropertyChanged("LastUpdatedDate");
				this.OnLastUpdatedDateChanged();
			}
		}
	}
	
	[Association(Name="aspnet_User_aspnet_Profile", Storage="_aspnet_User", ThisKey="UserId", IsForeignKey=true)]
	public aspnet_User aspnet_User
	{
		get
		{
			return this._aspnet_User.Entity;
		}
		set
		{
			aspnet_User previousValue = this._aspnet_User.Entity;
			if (((previousValue != value) 
						|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._aspnet_User.Entity = null;
					previousValue.aspnet_Profile = null;
				}
				this._aspnet_User.Entity = value;
				if ((value != null))
				{
					value.aspnet_Profile = this;
					this._UserId = value.UserId;
				}
				else
				{
					this._UserId = default(System.Guid);
				}
				this.SendPropertyChanged("aspnet_User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.aspnet_Roles")]
public partial class aspnet_Role : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ApplicationId;
	
	private System.Guid _RoleId;
	
	private string _RoleName;
	
	private string _LoweredRoleName;
	
	private string _Description;
	
	private EntitySet<aspnet_UsersInRole> _aspnet_UsersInRoles;
	
	private EntityRef<aspnet_Application> _aspnet_Application;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnLoweredRoleNameChanging(string value);
    partial void OnLoweredRoleNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
	
	public aspnet_Role()
	{
		this._aspnet_UsersInRoles = new EntitySet<aspnet_UsersInRole>(new Action<aspnet_UsersInRole>(this.attach_aspnet_UsersInRoles), new Action<aspnet_UsersInRole>(this.detach_aspnet_UsersInRoles));
		this._aspnet_Application = default(EntityRef<aspnet_Application>);
		OnCreated();
	}
	
	[Column(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
	public System.Guid ApplicationId
	{
		get
		{
			return this._ApplicationId;
		}
		set
		{
			if ((this._ApplicationId != value))
			{
				if (this._aspnet_Application.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnApplicationIdChanging(value);
				this.SendPropertyChanging();
				this._ApplicationId = value;
				this.SendPropertyChanged("ApplicationId");
				this.OnApplicationIdChanged();
			}
		}
	}
	
	[Column(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid RoleId
	{
		get
		{
			return this._RoleId;
		}
		set
		{
			if ((this._RoleId != value))
			{
				this.OnRoleIdChanging(value);
				this.SendPropertyChanging();
				this._RoleId = value;
				this.SendPropertyChanged("RoleId");
				this.OnRoleIdChanged();
			}
		}
	}
	
	[Column(Storage="_RoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
	public string RoleName
	{
		get
		{
			return this._RoleName;
		}
		set
		{
			if ((this._RoleName != value))
			{
				this.OnRoleNameChanging(value);
				this.SendPropertyChanging();
				this._RoleName = value;
				this.SendPropertyChanged("RoleName");
				this.OnRoleNameChanged();
			}
		}
	}
	
	[Column(Storage="_LoweredRoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
	public string LoweredRoleName
	{
		get
		{
			return this._LoweredRoleName;
		}
		set
		{
			if ((this._LoweredRoleName != value))
			{
				this.OnLoweredRoleNameChanging(value);
				this.SendPropertyChanging();
				this._LoweredRoleName = value;
				this.SendPropertyChanged("LoweredRoleName");
				this.OnLoweredRoleNameChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="NVarChar(256)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Association(Name="aspnet_Role_aspnet_UsersInRole", Storage="_aspnet_UsersInRoles", OtherKey="RoleId")]
	public EntitySet<aspnet_UsersInRole> aspnet_UsersInRoles
	{
		get
		{
			return this._aspnet_UsersInRoles;
		}
		set
		{
			this._aspnet_UsersInRoles.Assign(value);
		}
	}
	
	[Association(Name="aspnet_Application_aspnet_Role", Storage="_aspnet_Application", ThisKey="ApplicationId", IsForeignKey=true)]
	public aspnet_Application aspnet_Application
	{
		get
		{
			return this._aspnet_Application.Entity;
		}
		set
		{
			aspnet_Application previousValue = this._aspnet_Application.Entity;
			if (((previousValue != value) 
						|| (this._aspnet_Application.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._aspnet_Application.Entity = null;
					previousValue.aspnet_Roles.Remove(this);
				}
				this._aspnet_Application.Entity = value;
				if ((value != null))
				{
					value.aspnet_Roles.Add(this);
					this._ApplicationId = value.ApplicationId;
				}
				else
				{
					this._ApplicationId = default(System.Guid);
				}
				this.SendPropertyChanged("aspnet_Application");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_Role = this;
	}
	
	private void detach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_Role = null;
	}
}

[Table(Name="dbo.aspnet_SchemaVersions")]
public partial class aspnet_SchemaVersion : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _Feature;
	
	private string _CompatibleSchemaVersion;
	
	private bool _IsCurrentVersion;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFeatureChanging(string value);
    partial void OnFeatureChanged();
    partial void OnCompatibleSchemaVersionChanging(string value);
    partial void OnCompatibleSchemaVersionChanged();
    partial void OnIsCurrentVersionChanging(bool value);
    partial void OnIsCurrentVersionChanged();
    #endregion
	
	public aspnet_SchemaVersion()
	{
		OnCreated();
	}
	
	[Column(Storage="_Feature", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string Feature
	{
		get
		{
			return this._Feature;
		}
		set
		{
			if ((this._Feature != value))
			{
				this.OnFeatureChanging(value);
				this.SendPropertyChanging();
				this._Feature = value;
				this.SendPropertyChanged("Feature");
				this.OnFeatureChanged();
			}
		}
	}
	
	[Column(Storage="_CompatibleSchemaVersion", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string CompatibleSchemaVersion
	{
		get
		{
			return this._CompatibleSchemaVersion;
		}
		set
		{
			if ((this._CompatibleSchemaVersion != value))
			{
				this.OnCompatibleSchemaVersionChanging(value);
				this.SendPropertyChanging();
				this._CompatibleSchemaVersion = value;
				this.SendPropertyChanged("CompatibleSchemaVersion");
				this.OnCompatibleSchemaVersionChanged();
			}
		}
	}
	
	[Column(Storage="_IsCurrentVersion", DbType="Bit NOT NULL")]
	public bool IsCurrentVersion
	{
		get
		{
			return this._IsCurrentVersion;
		}
		set
		{
			if ((this._IsCurrentVersion != value))
			{
				this.OnIsCurrentVersionChanging(value);
				this.SendPropertyChanging();
				this._IsCurrentVersion = value;
				this.SendPropertyChanged("IsCurrentVersion");
				this.OnIsCurrentVersionChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.aspnet_Users")]
public partial class aspnet_User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ApplicationId;
	
	private System.Guid _UserId;
	
	private string _UserName;
	
	private string _LoweredUserName;
	
	private string _MobileAlias;
	
	private bool _IsAnonymous;
	
	private System.DateTime _LastActivityDate;
	
	private EntitySet<EventOrganizer> _EventOrganizers;
	
	private EntitySet<ListsOfParticipant> _ListsOfParticipants;
	
	private EntitySet<OrganizationContactPeople> _OrganizationContactPeoples;
	
	private EntityRef<aspnet_Membership> _aspnet_Membership;
	
	private EntitySet<aspnet_PersonalizationPerUser> _aspnet_PersonalizationPerUsers;
	
	private EntityRef<aspnet_Profile> _aspnet_Profile;
	
	private EntitySet<aspnet_UsersInRole> _aspnet_UsersInRoles;
	
	private EntityRef<aspnet_Application> _aspnet_Application;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoweredUserNameChanging(string value);
    partial void OnLoweredUserNameChanged();
    partial void OnMobileAliasChanging(string value);
    partial void OnMobileAliasChanged();
    partial void OnIsAnonymousChanging(bool value);
    partial void OnIsAnonymousChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    #endregion
	
	public aspnet_User()
	{
		this._EventOrganizers = new EntitySet<EventOrganizer>(new Action<EventOrganizer>(this.attach_EventOrganizers), new Action<EventOrganizer>(this.detach_EventOrganizers));
		this._ListsOfParticipants = new EntitySet<ListsOfParticipant>(new Action<ListsOfParticipant>(this.attach_ListsOfParticipants), new Action<ListsOfParticipant>(this.detach_ListsOfParticipants));
		this._OrganizationContactPeoples = new EntitySet<OrganizationContactPeople>(new Action<OrganizationContactPeople>(this.attach_OrganizationContactPeoples), new Action<OrganizationContactPeople>(this.detach_OrganizationContactPeoples));
		this._aspnet_Membership = default(EntityRef<aspnet_Membership>);
		this._aspnet_PersonalizationPerUsers = new EntitySet<aspnet_PersonalizationPerUser>(new Action<aspnet_PersonalizationPerUser>(this.attach_aspnet_PersonalizationPerUsers), new Action<aspnet_PersonalizationPerUser>(this.detach_aspnet_PersonalizationPerUsers));
		this._aspnet_Profile = default(EntityRef<aspnet_Profile>);
		this._aspnet_UsersInRoles = new EntitySet<aspnet_UsersInRole>(new Action<aspnet_UsersInRole>(this.attach_aspnet_UsersInRoles), new Action<aspnet_UsersInRole>(this.detach_aspnet_UsersInRoles));
		this._aspnet_Application = default(EntityRef<aspnet_Application>);
		OnCreated();
	}
	
	[Column(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
	public System.Guid ApplicationId
	{
		get
		{
			return this._ApplicationId;
		}
		set
		{
			if ((this._ApplicationId != value))
			{
				if (this._aspnet_Application.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnApplicationIdChanging(value);
				this.SendPropertyChanging();
				this._ApplicationId = value;
				this.SendPropertyChanged("ApplicationId");
				this.OnApplicationIdChanged();
			}
		}
	}
	
	[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid UserId
	{
		get
		{
			return this._UserId;
		}
		set
		{
			if ((this._UserId != value))
			{
				this.OnUserIdChanging(value);
				this.SendPropertyChanging();
				this._UserId = value;
				this.SendPropertyChanged("UserId");
				this.OnUserIdChanged();
			}
		}
	}
	
	[Column(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this.OnUserNameChanging(value);
				this.SendPropertyChanging();
				this._UserName = value;
				this.SendPropertyChanged("UserName");
				this.OnUserNameChanged();
			}
		}
	}
	
	[Column(Storage="_LoweredUserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
	public string LoweredUserName
	{
		get
		{
			return this._LoweredUserName;
		}
		set
		{
			if ((this._LoweredUserName != value))
			{
				this.OnLoweredUserNameChanging(value);
				this.SendPropertyChanging();
				this._LoweredUserName = value;
				this.SendPropertyChanged("LoweredUserName");
				this.OnLoweredUserNameChanged();
			}
		}
	}
	
	[Column(Storage="_MobileAlias", DbType="NVarChar(16)")]
	public string MobileAlias
	{
		get
		{
			return this._MobileAlias;
		}
		set
		{
			if ((this._MobileAlias != value))
			{
				this.OnMobileAliasChanging(value);
				this.SendPropertyChanging();
				this._MobileAlias = value;
				this.SendPropertyChanged("MobileAlias");
				this.OnMobileAliasChanged();
			}
		}
	}
	
	[Column(Storage="_IsAnonymous", DbType="Bit NOT NULL")]
	public bool IsAnonymous
	{
		get
		{
			return this._IsAnonymous;
		}
		set
		{
			if ((this._IsAnonymous != value))
			{
				this.OnIsAnonymousChanging(value);
				this.SendPropertyChanging();
				this._IsAnonymous = value;
				this.SendPropertyChanged("IsAnonymous");
				this.OnIsAnonymousChanged();
			}
		}
	}
	
	[Column(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
	public System.DateTime LastActivityDate
	{
		get
		{
			return this._LastActivityDate;
		}
		set
		{
			if ((this._LastActivityDate != value))
			{
				this.OnLastActivityDateChanging(value);
				this.SendPropertyChanging();
				this._LastActivityDate = value;
				this.SendPropertyChanged("LastActivityDate");
				this.OnLastActivityDateChanged();
			}
		}
	}
	
	[Association(Name="aspnet_User_EventOrganizer", Storage="_EventOrganizers", OtherKey="UserID")]
	public EntitySet<EventOrganizer> EventOrganizers
	{
		get
		{
			return this._EventOrganizers;
		}
		set
		{
			this._EventOrganizers.Assign(value);
		}
	}
	
	[Association(Name="aspnet_User_ListsOfParticipant", Storage="_ListsOfParticipants", OtherKey="UserID")]
	public EntitySet<ListsOfParticipant> ListsOfParticipants
	{
		get
		{
			return this._ListsOfParticipants;
		}
		set
		{
			this._ListsOfParticipants.Assign(value);
		}
	}
	
	[Association(Name="aspnet_User_OrganizationContactPeople", Storage="_OrganizationContactPeoples", OtherKey="UserID")]
	public EntitySet<OrganizationContactPeople> OrganizationContactPeoples
	{
		get
		{
			return this._OrganizationContactPeoples;
		}
		set
		{
			this._OrganizationContactPeoples.Assign(value);
		}
	}
	
	[Association(Name="aspnet_User_aspnet_Membership", Storage="_aspnet_Membership", ThisKey="UserId", IsUnique=true, IsForeignKey=false)]
	public aspnet_Membership aspnet_Membership
	{
		get
		{
			return this._aspnet_Membership.Entity;
		}
		set
		{
			aspnet_Membership previousValue = this._aspnet_Membership.Entity;
			if (((previousValue != value) 
						|| (this._aspnet_Membership.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._aspnet_Membership.Entity = null;
					previousValue.aspnet_User = null;
				}
				this._aspnet_Membership.Entity = value;
				if ((value != null))
				{
					value.aspnet_User = this;
				}
				this.SendPropertyChanged("aspnet_Membership");
			}
		}
	}
	
	[Association(Name="aspnet_User_aspnet_PersonalizationPerUser", Storage="_aspnet_PersonalizationPerUsers", OtherKey="UserId")]
	public EntitySet<aspnet_PersonalizationPerUser> aspnet_PersonalizationPerUsers
	{
		get
		{
			return this._aspnet_PersonalizationPerUsers;
		}
		set
		{
			this._aspnet_PersonalizationPerUsers.Assign(value);
		}
	}
	
	[Association(Name="aspnet_User_aspnet_Profile", Storage="_aspnet_Profile", ThisKey="UserId", IsUnique=true, IsForeignKey=false)]
	public aspnet_Profile aspnet_Profile
	{
		get
		{
			return this._aspnet_Profile.Entity;
		}
		set
		{
			aspnet_Profile previousValue = this._aspnet_Profile.Entity;
			if (((previousValue != value) 
						|| (this._aspnet_Profile.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._aspnet_Profile.Entity = null;
					previousValue.aspnet_User = null;
				}
				this._aspnet_Profile.Entity = value;
				if ((value != null))
				{
					value.aspnet_User = this;
				}
				this.SendPropertyChanged("aspnet_Profile");
			}
		}
	}
	
	[Association(Name="aspnet_User_aspnet_UsersInRole", Storage="_aspnet_UsersInRoles", OtherKey="UserId")]
	public EntitySet<aspnet_UsersInRole> aspnet_UsersInRoles
	{
		get
		{
			return this._aspnet_UsersInRoles;
		}
		set
		{
			this._aspnet_UsersInRoles.Assign(value);
		}
	}
	
	[Association(Name="aspnet_Application_aspnet_User", Storage="_aspnet_Application", ThisKey="ApplicationId", IsForeignKey=true)]
	public aspnet_Application aspnet_Application
	{
		get
		{
			return this._aspnet_Application.Entity;
		}
		set
		{
			aspnet_Application previousValue = this._aspnet_Application.Entity;
			if (((previousValue != value) 
						|| (this._aspnet_Application.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._aspnet_Application.Entity = null;
					previousValue.aspnet_Users.Remove(this);
				}
				this._aspnet_Application.Entity = value;
				if ((value != null))
				{
					value.aspnet_Users.Add(this);
					this._ApplicationId = value.ApplicationId;
				}
				else
				{
					this._ApplicationId = default(System.Guid);
				}
				this.SendPropertyChanged("aspnet_Application");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_EventOrganizers(EventOrganizer entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_User = this;
	}
	
	private void detach_EventOrganizers(EventOrganizer entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_User = null;
	}
	
	private void attach_ListsOfParticipants(ListsOfParticipant entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_User = this;
	}
	
	private void detach_ListsOfParticipants(ListsOfParticipant entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_User = null;
	}
	
	private void attach_OrganizationContactPeoples(OrganizationContactPeople entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_User = this;
	}
	
	private void detach_OrganizationContactPeoples(OrganizationContactPeople entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_User = null;
	}
	
	private void attach_aspnet_PersonalizationPerUsers(aspnet_PersonalizationPerUser entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_User = this;
	}
	
	private void detach_aspnet_PersonalizationPerUsers(aspnet_PersonalizationPerUser entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_User = null;
	}
	
	private void attach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_User = this;
	}
	
	private void detach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
	{
		this.SendPropertyChanging();
		entity.aspnet_User = null;
	}
}

[Table(Name="dbo.aspnet_UsersInRoles")]
public partial class aspnet_UsersInRole : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _UserId;
	
	private System.Guid _RoleId;
	
	private EntityRef<aspnet_Role> _aspnet_Role;
	
	private EntityRef<aspnet_User> _aspnet_User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    #endregion
	
	public aspnet_UsersInRole()
	{
		this._aspnet_Role = default(EntityRef<aspnet_Role>);
		this._aspnet_User = default(EntityRef<aspnet_User>);
		OnCreated();
	}
	
	[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid UserId
	{
		get
		{
			return this._UserId;
		}
		set
		{
			if ((this._UserId != value))
			{
				if (this._aspnet_User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIdChanging(value);
				this.SendPropertyChanging();
				this._UserId = value;
				this.SendPropertyChanged("UserId");
				this.OnUserIdChanged();
			}
		}
	}
	
	[Column(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid RoleId
	{
		get
		{
			return this._RoleId;
		}
		set
		{
			if ((this._RoleId != value))
			{
				if (this._aspnet_Role.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnRoleIdChanging(value);
				this.SendPropertyChanging();
				this._RoleId = value;
				this.SendPropertyChanged("RoleId");
				this.OnRoleIdChanged();
			}
		}
	}
	
	[Association(Name="aspnet_Role_aspnet_UsersInRole", Storage="_aspnet_Role", ThisKey="RoleId", IsForeignKey=true)]
	public aspnet_Role aspnet_Role
	{
		get
		{
			return this._aspnet_Role.Entity;
		}
		set
		{
			aspnet_Role previousValue = this._aspnet_Role.Entity;
			if (((previousValue != value) 
						|| (this._aspnet_Role.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._aspnet_Role.Entity = null;
					previousValue.aspnet_UsersInRoles.Remove(this);
				}
				this._aspnet_Role.Entity = value;
				if ((value != null))
				{
					value.aspnet_UsersInRoles.Add(this);
					this._RoleId = value.RoleId;
				}
				else
				{
					this._RoleId = default(System.Guid);
				}
				this.SendPropertyChanged("aspnet_Role");
			}
		}
	}
	
	[Association(Name="aspnet_User_aspnet_UsersInRole", Storage="_aspnet_User", ThisKey="UserId", IsForeignKey=true)]
	public aspnet_User aspnet_User
	{
		get
		{
			return this._aspnet_User.Entity;
		}
		set
		{
			aspnet_User previousValue = this._aspnet_User.Entity;
			if (((previousValue != value) 
						|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._aspnet_User.Entity = null;
					previousValue.aspnet_UsersInRoles.Remove(this);
				}
				this._aspnet_User.Entity = value;
				if ((value != null))
				{
					value.aspnet_UsersInRoles.Add(this);
					this._UserId = value.UserId;
				}
				else
				{
					this._UserId = default(System.Guid);
				}
				this.SendPropertyChanged("aspnet_User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
